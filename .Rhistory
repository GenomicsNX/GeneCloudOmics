regroup[[3]] <- unlist(fruit_groups[c(4)])
regroup[[4]] <- unlist(fruit_groups[c(6,7)])
regroup[[5]] <- unlist(fruit_groups[c(8:10)])
regroup[[6]] <- unlist(fruit_groups[c(11, 13:15)])
regroup[[7]] <- unlist(fruit_groups[c(12)])
names(regroup) <- letters[seq_along(regroup)]
head(regroup[[1]])
# regrouping individual expression in each figure png
for(g in seq_along(regroup)){
fruit_i <- rpkm_de[fruit_groups[[g]],]; #df <- fruit_i
png(paste0("./avo_fruit_2015/5regroup/group",names(regroup)[g],".png"), height=2, width=2.5, unit="in", res=80)
par(mgp=c(1,0.25,0),mar=c(1.1, 2, 1, 1)+0.1 )
expPattern(fruit_i, multiple = F, scaling = F, ylab="RPKM",xlab="", xaxt="n")
axis(1, 1:3, c("PreCli","Cli","PostCli"))
title(main=paste("Group",names(regroup)[g]), line=0.3, pch=2)
dev.off()
}
names(regroup) <- LETTERS[seq_along(regroup)]
# regrouping individual expression in each figure png
for(g in seq_along(regroup)){
fruit_i <- rpkm_de[fruit_groups[[g]],]; #df <- fruit_i
png(paste0("./avo_fruit_2015/5regroup/group",names(regroup)[g],".png"), height=2, width=2.5, unit="in", res=80)
par(mgp=c(1,0.25,0),mar=c(1.1, 2, 1, 1)+0.1 )
expPattern(fruit_i, multiple = F, scaling = F, ylab="RPKM",xlab="", xaxt="n")
axis(1, 1:3, c("PreCli","Cli","PostCli"))
title(main=paste("Group",names(regroup)[g]), line=0.3, pch=2)
dev.off()
}
names(regroup)[g]
# regrouping individual expression in each figure png
for(g in seq_along(regroup)){
fruit_i <- rpkm_de[fruit_groups[[g]],]; #df <- fruit_i
png(paste0("./avo_fruit_2015/5regroup/group",names(regroup)[g],".png"), height=2, width=2.5, unit="in", res=80)
par(mgp=c(1,0.25,0),mar=c(1.1, 2, 1, 1)+0.1 )
expPattern(fruit_i, multiple = F, scaling = F, ylab="RPKM",xlab="", xaxt="n")
axis(1, 1:3, c("PreCli","Cli","PostCli"))
title(main=paste("Group",names(regroup)[g]), line=0.3, pch=2)
dev.off()
}
# regrouping individual expression in each figure png
for(g in seq_along(regroup)){
fruit_i <- rpkm_de[regroup[[g]],]; #df <- fruit_i
png(paste0("./avo_fruit_2015/5regroup/group",names(regroup)[g],".png"), height=2, width=2.5, unit="in", res=80)
par(mgp=c(1,0.25,0),mar=c(1.1, 2, 1, 1)+0.1 )
expPattern(fruit_i, multiple = F, scaling = F, ylab="RPKM",xlab="", xaxt="n")
axis(1, 1:3, c("PreCli","Cli","PostCli"))
title(main=paste("Group",names(regroup)[g]), line=0.3, pch=2)
dev.off()
}
regroup <- vector(length=6, mode="list" )
regroup[[1]] <- unlist(fruit_groups[c(1,2,6,7)])
regroup[[2]] <- unlist(fruit_groups[c(3,5)])
regroup[[3]] <- unlist(fruit_groups[c(4)])
regroup[[4]] <- unlist(fruit_groups[c(8:10)])
regroup[[5]] <- unlist(fruit_groups[c(11, 13:15)])
regroup[[6]] <- unlist(fruit_groups[c(12)])
names(regroup) <- LETTERS[seq_along(regroup)]
# regrouping individual expression in each figure png
for(g in seq_along(regroup)){
fruit_i <- rpkm_de[regroup[[g]],]; #df <- fruit_i
png(paste0("./avo_fruit_2015/5regroup/group",names(regroup)[g],".png"), height=2, width=2.5, unit="in", res=80)
par(mgp=c(1,0.25,0),mar=c(1.1, 2, 1, 1)+0.1 )
expPattern(fruit_i, multiple = F, scaling = F, ylab="RPKM",xlab="", xaxt="n")
axis(1, 1:3, c("PreCli","Cli","PostCli"))
title(main=paste("Group",names(regroup)[g]), line=0.3, pch=2)
dev.off()
}
# df: after cutoff
if(missing(cutoff)){
cutoff <- min(apply(rpkm, MARGIN=1, max)) # get cutoff values
}
# get every pair
cc <- combn(1:ncol(rpkm), 2)
for(i in 1:ncol(cc)){
c1 <- cc[1,i]; c2 <- cc[2,i] ; rpkm_i <- rpkm[,c(c1,c2)];
row_sub = apply(rpkm_i, 1, function(row) all(row !=0 ))
rpkm_i <- rpkm_i[row_sub,]
xlab <- colnames(rpkm_i)[1]; ylab <- colnames(rpkm_i)[2]
r_value <- round(cor(rpkm_i[,1], rpkm_i[,2]),2)
# save to png
png(paste0("./avo_fruit_2015/2scatter_",i,".png"), height=200, width=200)
#plot
par(mgp=c(1,0.25,0),mar=c(2.5,2.3,1,0.9)+0.1)
LSD::heatscatter(x=rpkm_i[,1], y=rpkm_i[,2], log="xy",
xlab=paste(xlab,"(RPKM)"), ylab=paste(ylab,"(RPKM)"), main="" )
# title(main=paste(ylab,"-",xlab), line = 0.1)
legend("topleft", bty="n", legend=paste0("cutoff at ",cutoff," RPKM","\n",
"R = ",r_value))
dev.off()
}
# get every pair
cc <- combn(1:ncol(rpkm), 2)
for(i in 1:ncol(cc)){
c1 <- cc[1,i]; c2 <- cc[2,i] ; rpkm_i <- rpkm[,c(c1,c2)];
row_sub = apply(rpkm_i, 1, function(row) all(row !=0 ))
rpkm_i <- rpkm_i[row_sub,]
xlab <- colnames(rpkm_i)[1]; ylab <- colnames(rpkm_i)[2]
r_value <- round(cor(rpkm_i[,1], rpkm_i[,2]),2)
# save to png
png(paste0("./avo_fruit_2015/2scatter_",i,".png"), height=200, width=200)
#plot
par(mgp=c(1,0.25,0),mar=c(2.5,2.3,1,0.9)+0.1)
LSD::heatscatter(x=rpkm_i[,1], y=rpkm_i[,2], log="xy",
xlab=paste(xlab,"(RPKM)"), ylab=paste(ylab,"(RPKM)"), main="" )
# title(main=paste(ylab,"-",xlab), line = 0.1)
legend("topleft", bty="n", legend=paste0("R = ",r_value))
dev.off()
}
par(mgp=c(1,0.25,0),mar=c(2.5,2.3,1,0.9)+0.1)
png(paste0("./avo_fruit_2015/4DE_vocalno.png"), height=200, width=200)
vocalnoPlot(mynoiseq_prepost@results[[1]])
dev.off()
png(paste0("./avo_fruit_2015/4DE_expression.png"), height=200, width=200)
DE.plot(mynoiseq_prepost, q = q_cutoff, graphic = "expr", log.scale = TRUE)
dev.off()
png(paste0("./avo_fruit_2015/4DE_MD.png"), height=200, width=200)
DE.plot(mynoiseq_prepost, q = q_cutoff, graphic = "MD")
dev.off()
png(paste0("./avo_fruit_2015/4DE_vocalno.png"), height=200, width=200)
par(mgp=c(1,0.25,0),mar=c(2.5,2.3,1,0.9)+0.1)
vocalnoPlot(mynoiseq_prepost@results[[1]])
dev.off()
png(paste0("./avo_fruit_2015/4DE_expression.png"), height=200, width=200)
par(mgp=c(1,0.25,0),mar=c(2.5,2.3,1,0.9)+0.1)
DE.plot(mynoiseq_prepost, q = q_cutoff, graphic = "expr", log.scale = TRUE)
dev.off()
png(paste0("./avo_fruit_2015/4DE_MD.png"), height=200, width=200)
par(mgp=c(1,0.25,0),mar=c(2.5,2.3,1,0.9)+0.1)
DE.plot(mynoiseq_prepost, q = q_cutoff, graphic = "MD")
dev.off()
png(paste0("./avo_fruit_2015/4DE_vocalno.png"), height=200, width=200)
par(mgp=c(1.5,0.25,0),mar=c(2,2,1,0.5)+0.1)
vocalnoPlot(mynoiseq_prepost@results[[1]])
dev.off()
png(paste0("./avo_fruit_2015/4DE_expression.png"), height=200, width=200)
par(mgp=c(1.5,0.25,0),mar=c(2,2,1,0.5)+0.1)
DE.plot(mynoiseq_prepost, q = q_cutoff, graphic = "expr", log.scale = TRUE)
dev.off()
png(paste0("./avo_fruit_2015/4DE_MD.png"), height=200, width=200)
par(mgp=c(1.5,0.25,0),mar=c(2,2,1,0.5)+0.1)
DE.plot(mynoiseq_prepost, q = q_cutoff, graphic = "MD")
dev.off()
png(paste0("./avo_fruit_2015/4DE_vocalno.png"), height=240, width=240)
par(mgp=c(1.3,0.25,0),mar=c(2.5,2.5,1.5,0.7)+0.1)
vocalnoPlot(mynoiseq_prepost@results[[1]])
dev.off()
png(paste0("./avo_fruit_2015/4DE_expression.png"), height=240, width=240)
par(mgp=c(1.3,0.25,0),mar=c(2.5,2.5,1.5,0.7)+0.1)
DE.plot(mynoiseq_prepost, q = q_cutoff, graphic = "expr", log.scale = TRUE)
dev.off()
png(paste0("./avo_fruit_2015/4DE_MD.png"), height=240, width=240)
par(mgp=c(1.3,0.25,0),mar=c(2.5,2.5,1.5,0.7)+0.1)
DE.plot(mynoiseq_prepost, q = q_cutoff, graphic = "MD")
dev.off()
png(paste0("./avo_fruit_2015/4DE_vocalno.png"), height=3, width=3, unit="in", res=300)
par(mgp=c(1.3,0.25,0),mar=c(2.5,2.5,1.5,0.7)+0.1)
vocalnoPlot(mynoiseq_prepost@results[[1]])
dev.off()
png(paste0("./avo_fruit_2015/4DE_vocalno.png"), height=2.5, width=2.5, unit="in", res=300)
par(mgp=c(1.3,0.25,0),mar=c(2.5,2.5,1.5,0.7)+0.1)
vocalnoPlot(mynoiseq_prepost@results[[1]])
dev.off()
png(paste0("./avo_fruit_2015/4DE_vocalno.png"), height=3, width=3, unit="in", res=300)
par(mgp=c(1.1,0.4,0),mar=c(2.5,2.5,1.5,0.7)+0.1)
vocalnoPlot(mynoiseq_prepost@results[[1]])
dev.off()
png(paste0("./avo_fruit_2015/4DE_vocalno.png"), height=3, width=3, unit="in", res=300)
par(mgp=c(1.2,0.,0),mar=c(2.5,2.5,1.5,0.7)+0.1)
vocalnoPlot(mynoiseq_prepost@results[[1]])
dev.off()
png(paste0("./avo_fruit_2015/4DE_expression.png"), height=3, width=3, unit="in", res=300)
par(mgp=c(1.2,0.4,0),mar=c(2.5,2.5,1.5,0.7)+0.1)
DE.plot(mynoiseq_prepost, q = q_cutoff, graphic = "expr", log.scale = TRUE)
dev.off()
png(paste0("./avo_fruit_2015/4DE_MD.png"), height=3, width=3, unit="in", res=300)
par(mgp=c(1.2,0.4,0),mar=c(2.5,2.5,1.5,0.7)+0.1)
DE.plot(mynoiseq_prepost, q = q_cutoff, graphic = "MD")
dev.off()
length(de_3cond)
library(fitdistrplus)
library(MASS)
library(actuar)
library(stats)
dist.names <- c("Lognormal", "Pareto", "Burr", "Loglogistic", "Weibull", "Gamma")
colors <- c(rainbow(5),grey(0.6))
sample.list <- list()
for (i in 1:ncol(rpkm.raw)) {
samplei.i<-rpkm.raw[,i]
samplei.i<-samplei.i[samplei.i>0]
ln<-fitdist(samplei.i,"lnorm")
p<-fitdist(samplei.i,"pareto",start = list(shape = 1, scale = 200),lower=c(0,0))
b<-fitdist(samplei.i,"burr",start = list(shape1 = 1, shape2 = 1, rate = 1),lower=c(0,0,0))
ll<-fitdist(samplei.i,"llogis",lower=c(0,0))
wb<-fitdist(samplei.i,"weibull",lower=c(0,0))
g<-fitdist(samplei.i,"gamma",lower=c(0, 0),start=list(scale=1,shape=1))
samplei.i.list<-list(ln,p,b,ll,wb,g)
sample.list[[i]] <- samplei.i.list
}
# eCDF plots
par(mgp=c(1.2,0.4,0),mar=c(2.5,2.3,1,0.9)+0.1,mfrow=c(2,2))  #bottom, left, top, right #location of label, tick mark label, tick mark
cutoff_vals = 2
for (i in seq_along(rpkm.raw)) {
samplei.i.list <- sample.list[[i]]
main.title <- colnames(rpkm.raw)[i]
# save to png
png(paste0("./avo_fruit_2015/1a_cdf_",i,".png"), height=200, width=200)
#plot
par(mgp=c(1,0.25,0),mar=c(2.5,2.3,1,0.9)+0.1)
cdfcomp(samplei.i.list,xlogscale=TRUE,ylogscale=TRUE,do.points=F,fitcol=colors,lwd=2,
addlegend = T,xlab="RPKM",ylab="CDF", main = main.title)
abline(v=cutoff_vals, lty=2)
text(x=cutoff_vals*8, y=10^-3, labels=paste("RPKM =",cutoff_vals))
dev.off()
}
# qq plots
par(mgp=c(1.2,0.4,0),mar=c(2.5,2.3,1,0.9)+0.1,mfrow=c(2,2))  #bottom, left, top, right #location of label, tick mark label, tick mark
for (i in seq_along(rpkm.raw)) {
samplei.i.list <- sample.list[[i]]
main.title <- colnames(rpkm.raw)[i]
# save to png
png(paste0("./avo_fruit_2015/1b_qq_",i,".png"), height=200, width=200)
#plot
par(mgp=c(1,0.25,0),mar=c(2.5,2.3,1,0.9)+0.1)
qqcomp(samplei.i.list, xlogscale=TRUE, ylogscale=TRUE, xlim=c(10^-2,10^5),ylim=c(10^-2,10^5),
fitcol=colors, fitpch=2, lwd=2, addlegend = TRUE, main = main.title)
abline(v=cutoff_vals, lty=2)
text(x=cutoff_vals*10, y=10^4, labels=paste("RPKM =",cutoff_vals))
dev.off()
}
# rm(samplei.i, ln, sample.list, samplei.i.list, main.title)
# eCDF plots
par(mgp=c(1.2,0.4,0),mar=c(2.5,2.3,1,0.9)+0.1,mfrow=c(2,2))  #bottom, left, top, right #location of label, tick mark label, tick mark
cutoff_vals = 2
for (i in seq_along(rpkm.raw)) {
samplei.i.list <- sample.list[[i]]
main.title <- colnames(rpkm.raw)[i]
# save to png
png(paste0("./avo_fruit_2015/1a_cdf_",i,".png"), height=200, width=200)
#plot
par(mgp=c(1,0.25,0),mar=c(2.5,2.3,1,0.9)+0.1)
cdfcomp(samplei.i.list,xlogscale=TRUE,ylogscale=TRUE,do.points=F,fitcol=colors,lwd=2,
addlegend = T,xlab="RPKM",ylab="CDF", main = main.title)
abline(v=cutoff_vals, lty=2)
text(x=cutoff_vals*8, y=10^-1, labels=paste("RPKM =",cutoff_vals))
dev.off()
}
# qq plots
par(mgp=c(1.2,0.4,0),mar=c(2.5,2.3,1,0.9)+0.1,mfrow=c(2,2))  #bottom, left, top, right #location of label, tick mark label, tick mark
for (i in seq_along(rpkm.raw)) {
samplei.i.list <- sample.list[[i]]
main.title <- colnames(rpkm.raw)[i]
# save to png
png(paste0("./avo_fruit_2015/1b_qq_",i,".png"), height=200, width=200)
#plot
par(mgp=c(1,0.25,0),mar=c(2.5,2.3,1,0.9)+0.1)
qqcomp(samplei.i.list, xlogscale=TRUE, ylogscale=TRUE, xlim=c(10^-2,10^5),ylim=c(10^-2,10^5),
fitcol=colors, fitpch=2, lwd=2, addlegend = TRUE, main = main.title)
abline(v=cutoff_vals, lty=2)
text(x=cutoff_vals*30, y=10^5, labels=paste("RPKM =",cutoff_vals))
dev.off()
}
#
raw_data <- read.csv("Desktop/E-MTAB-2967_sdrf.csv")
expr <- Biobase::exprs(raw_data)
raw_data <- read.csv("C:/Users/BUITT/Desktop/E-MTAB-2967_sdrf.csv")
expr <- Biobase::exprs(raw_data)
head(Biobase::pData(raw_data))
library(Biobase)
sdrf_location <- file.path(raw_data_dir, "E-MTAB-2967.sdrf.txt")
SDRF <- read.delim(sdrf_location)
rownames(SDRF) <- SDRF$Array.Data.File
SDRF <- AnnotatedDataFrame(SDRF)
raw_data <- oligo::read.celfiles(filenames = file.path(raw_data_dir,
SDRF$Array.Data.File),
verbose = FALSE, phenoData = SDRF)
BiocManager::install("oligo")
raw_data <- oligo::read.celfiles(filenames = file.path(raw_data_dir,
SDRF$Array.Data.File),
verbose = FALSE, phenoData = SDRF)
sdrf_location <- "C:/Users/BUITT/Desktop/E-MTAB-2967.sdrf.csv"
SDRF <- read.delim(sdrf_location)
sdrf_location <- "C:/Users/BUITT/Desktop/E-MTAB-2967.sdrf.txt"
rownames(SDRF) <- SDRF$Array.Data.File
SDRF <- read.delim(sdrf_location)
SDRF <- read.delim(sdrf_location)
rownames(SDRF) <- SDRF$Array.Data.File
SDRF <- AnnotatedDataFrame(SDRF)
raw_data <- oligo::read.celfiles(filenames = file.path(raw_data_dir,
SDRF$Array.Data.File),
verbose = FALSE, phenoData = SDRF)
raw_data <- oligo::read.celfiles(filenames = sdrf_location,
verbose = FALSE, phenoData = SDRF)
raw_data_dir <- "C:/Users/BUITT/Desktop"
sdrf_location <- "C:/Users/BUITT/Desktop/E-MTAB-2967.sdrf.txt"
SDRF <- read.delim(sdrf_location)
rownames(SDRF) <- SDRF$Array.Data.File
SDRF <- AnnotatedDataFrame(SDRF)
raw_data <- oligo::read.celfiles(filenames = filenames = file.path(raw_data_dir, SDRF$Array.Data.File),
verbose = FALSE, phenoData = SDRF)
raw_data <- oligo::read.celfiles(filenames = file.path(raw_data_dir, SDRF$Array.Data.File),
verbose = FALSE, phenoData = SDRF)
quit()
knitr::opts_chunk$set(echo = TRUE)
wd <- getwd()
setwd(wd)
rstudioapi::getActiveDocumentContext()$path # file path
getwd()
load("fruit_stage_2015_20200605.RData")
plotHeatmap <- function(df,clusterNum=2,cluster_columns=T){
df <- df[apply(df, 1, function(x) !all(x==0)),] # remove all-zero values
# df = rpkm values, filtered
DS3 <- t(scale(t(df)));
# top_annotation <- ComplexHeatmap::HeatmapAnnotation()
col_fun <- rainbow(ncol(DS3)); names(col_fun) <- colnames(DS3)
ColAnn <- data.frame(Sample=colnames(DS3))
ColAnn <- ComplexHeatmap::HeatmapAnnotation(df=ColAnn, which="col", col=list(Sample=col_fun)) #
set.seed(110)
a <- ComplexHeatmap::Heatmap(DS3, name="Exp",
col = circlize::colorRamp2(c(min(DS3),0,max(DS3)), c("red","black", "green")),
row_names_gp = grid::gpar(fontsize = 1),
row_dend_gp = grid::gpar(fontsize = 1),
# row_title_gp = grid::gpar(fontsize = 10),
# row_dend_width = grid::unit(3, "cm"),
split = clusterNum,
heatmap_legend_param = list(title = "Expression", color_bar = "continuous"),
show_heatmap_legend = TRUE,
column_names_side = "top",
#Row annotation configurations
cluster_rows=TRUE,
show_row_dend=TRUE,
show_row_names=FALSE,
#row_title="Transcript", #overridden by 'split' it seems
row_title_side="left",
row_title_gp=grid::gpar(fontsize=15, fontface="bold"),
row_names_side="left",
row_title_rot=0,
#Column annotation configuratiions
cluster_columns=cluster_columns,
show_column_dend=TRUE,
column_title="Avocado Organs",
column_title_side="top",
column_title_gp=grid::gpar(fontsize=15, fontface="bold"),
column_title_rot=0,
show_column_names=TRUE,
#Dendrogram configurations: columns
clustering_distance_columns="pearson",
clustering_method_columns="ward.D2",
column_dend_height=grid::unit(10,"mm"),
#Dendrogram configurations: rows
clustering_distance_rows = "pearson",
clustering_method_rows="ward.D2",
row_dend_width=grid::unit(30,"mm"),
#Annotations (row annotation must be added with 'draw' function, below)
# top_annotation_height=grid::unit(0.5,"cm"),
top_annotation=ColAnn
)
set.seed(110)
rcl.list <- ComplexHeatmap::row_order(a)
# convert to gene names
rcl.list2 <- rcl.list
for(i in 1:length(rcl.list)){
rcl.list2[[i]] <- rownames(DS3)[rcl.list[[i]] ]
}
return(list(a, rcl.list2))
}
# load fruit DE
rpkm_de <- rpkm[rownames(rpkm) %in% de_3cond, ]
# clustering
n_group <- 15
fruit_hc <- plotHeatmap(rpkm_de, n_group, F)
fruit_groups <- fruit_hc[[2]]
# function to draw expression pattern for 1 group
expPattern <- function(df, ttime=1:ncol(df), multiple=F, scaling=F, ...){
if(scaling){
df <- t(scale(t(df)))
}
# df = df of gene expression (in 1 group, with time)
avg_df <- colMeans(df)
if(multiple){
if(scaling){
ylim=range(df)
} else{
yrange <- max(avg_df)-min(avg_df)
ylim=c(min(df), max(avg_df)+yrange)
}
plot(x=ttime, y=avg_df, col="red", type="o", ylim=ylim,pch=19, ...)
for(i in 1:nrow(df)){
lines(x=ttime, y=df[i,], col=scales::alpha("grey60",0.4) )
}
lines(x=ttime, y=avg_df, col="red", type="o",pch=19 )
} else{
plot(x=ttime, y=avg_df, col="red", type="o", pch=19, ... )
}
legend("topright", bty="n", legend=paste(nrow(df),"genes"))
}
groupCor <- function(df, ...){
# check correlation of individual genes with average exp of group
avg_df <- colMeans(df)
cor_vec <- apply(df, 1, function(x) cor(x, avg_df) )
hist(cor_vec, breaks = 20, ...)
legend("topleft",bty="n",legend=paste0("Average Cor = ",round(mean(cor_vec),2) ) )
}
rpkm_de <- rpkm[rownames(rpkm) %in% de_3cond, ]
regroup <- vector(length=6, mode="list" )
regroup[[1]] <- unlist(fruit_groups[c(1,2,6,7)])
regroup[[2]] <- unlist(fruit_groups[c(3,5)])
regroup[[3]] <- unlist(fruit_groups[c(4)])
regroup[[4]] <- unlist(fruit_groups[c(8:10)])
regroup[[5]] <- unlist(fruit_groups[c(11, 13:15)])
regroup[[6]] <- unlist(fruit_groups[c(12)])
names(regroup) <- LETTERS[seq_along(regroup)]
# regrouping individual expression in each figure png
for(g in seq_along(regroup)){
fruit_i <- rpkm_de[regroup[[g]],]; #df <- fruit_i
# png(paste0("./avo_fruit_2015/5regroup/group",names(regroup)[g],".png"), height=2, width=2.5, unit="in", res=80)
par(mgp=c(1,0.25,0),mar=c(1.1, 2, 1, 1)+0.1 )
expPattern(fruit_i, multiple = F, scaling = F, ylab="RPKM",xlab="", xaxt="n")
axis(1, 1:3, c("PreCli","Cli","PostCli"))
title(main=paste("Group",names(regroup)[g]), line=0.3, pch=2)
# dev.off()
}
ara_ref <- read.csv("s3_ara*.csv")
ara_ref <- read.csv("s3_arabidopsis_reference.csv")
head(ara_ref)
ara_ref <- read.csv("s3_arabidopsis_reference.csv", na.strings = "---", stringsAsFactors = F)
head(ara_ref)
down_genes <- unlist(regroup[c("B", "C")])
head(down_genes)
names(down_genes) <- NULL
names(down_genes) <- NULL
head(down_genes)
down_genes_uni <- unlist(regroup[c("B", "C")])
names(down_genes_uni) <- NULL
rm(down_genes)
down_genes_ara <- ara_ref[ara_ref$ID %in% down_genes_uni, "Arabidopsis"]
head(down_genes_ara, 50)
down_genes_ara <- ara_ref[ara_ref$ID %in% down_genes_uni,c("ID", "Arabidopsis")]
head(down_genes_ara, 50)
ara_ref[10:15, ]
down_genes_ara <- ara_ref[ara_ref$ID %in% down_genes_uni,c("Arabidopsis")]
down_genes_ara <- na.omit(down_genes_ara)
down_genes_ara <- ara_ref[ara_ref$ID %in% down_genes_uni,c("Arabidopsis")] %>% na.omit()
library(dplyr)
down_genes_ara <- ara_ref[ara_ref$ID %in% down_genes_uni,c("Arabidopsis")] %>% na.omit()
rm(ara_ref)
length(down_genes_ara)
length(down_genes_uni)
write.csv(down_genes_ara, row.names = F, file = "avo_fruit_2015/down_gene_arabidopsis_map.csv")
down_genes_ara <- ara_ref[ara_ref$ID %in% down_genes_uni,c("ID","Arabidopsis")] %>% na.omit()
ara_ref <- read.csv("s3_arabidopsis_reference.csv", na.strings = "---", stringsAsFactors = F)
down_genes_ara <- ara_ref[ara_ref$ID %in% down_genes_uni,c("ID","Arabidopsis")] %>% na.omit()
write.csv(down_genes_ara, row.names = F, file = "avo_fruit_2015/down_gene_arabidopsis_map.csv")
regroupB_ara <- ara_ref[ara_ref$ID %in% regroup[["B"]] ,c("ID","Arabidopsis")] %>% na.omit()
write.csv(regroupB_ara, row.names = F, file = "avo_fruit_2015/groupB_arabidopsis_map.csv")
ara_fat <- read.csv("s13_arabidopsis_lipid.csv")
head(ara_fat)
ara_fat <- read.csv("s13_arabidopsis_lipid.csv")
ara_fat <- ara_fat[,c("ID", "Arabidopsis")]
down_fat <- intersect(unique(ara_fat$ID), down_genes_uni)
down_fat
fat_percent <- vector(length = length(regroup))
names(fat_percent) <- names(regroup)
for(i in seq_along(regroup)){
fat_id <- intersect(unique(ara_fat$ID), regroup[[i]])
fat_percent[i] <- length(fat_id)/ length(regroup[[i]])
}
fat_percent
regroupC_ara <- ara_ref[ara_ref$ID %in% regroup[["C"]] ,c("ID","Arabidopsis")] %>% na.omit()
write.csv(regroupC_ara, row.names = F, file = "avo_fruit_2015/groupC_arabidopsis_map.csv")
i=3
fat_id <- intersect(unique(ara_fat$ID), regroup[[i]])
fat_id
ara_fat[ara_fat%ID %in% fat_id, 2]
ara_fat[ara_fat$ID %in% fat_id, 2]
quit()
q()
getwd()
library(reticulate)
py_config()
R.home(component="home")
py_config()
q()
getwd()
library(reticulate)
py_config()
use_python(" C:/Program Files (x86)/Python3/python.exe")
reticulate::use_python("C:/Program Files (x86)/Python3/python.exe")
reticulate::py_run_file("C:\Users\BUITT\Dropbox\Biotrans\ABioTrans\test1_path.py")
py_config()
reticulate::use_python("C:/Program Files (x86)/Python3/python.exe")
reticulate::py_run_file("C:\\Users\\BUITT\\Dropbox\\Biotrans\\ABioTrans\\test1_path.py")
reticulate::py_config()
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('ABioTrans.R')
exit()
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
#Sys.setenv("plotly_username"=" your_plotly_username")
#Sys.setenv("plotly_api_key"="your_api_key")
## test repo
wd <- dirname(rstudioapi::getActiveDocumentContext()$path)  #set wd as the current folder
print(wd == getwd())
print(wd)
print(getwd())
if(! wd == getwd()){
setwd(wd)
}
Sys.setenv(RETICULATE_PYTHON = "C:\\Users\\BUITT\\AppData\\Local\\Programs\\Python\\Python38")
reticulate::py_config()
runApp('ABioTrans.R')
q()
