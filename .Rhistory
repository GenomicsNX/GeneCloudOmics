df_alltime2 <- df_alltime2[!rownames(df_alltime2) %in% c("YDL133C-A", "YLR167W","YGR192C"), ]
# get yeast de genes
diff2_theta <- read.csv("./DE compare/yeast_scatlay.csv")$Gene;
diff2_theta <- setdiff(diff2_theta, c("YDL133C-A","YLR167W","YGR192C"))
diff2_acute <- read.csv("./review2_GO/yeast_scatlay_pval_fc.csv")
diff2_acute <- diff2_acute[(diff2_acute$pval <= 0.1) &
(diff2_acute$lfc_abs >= 1) &
(diff2_acute$non_overlapped == TRUE) , "Gene"]
diff2_collective <- setdiff(diff2_theta, diff2_acute)
diff2_collective <- setdiff(diff2_collective, c("YDL133C-A", "YLR167W","YGR192C"))
deseq2_de  <- read.csv("./DE compare/yeast_deseq_fc2_0.05.csv")$Gene
noiseq2_de <- read.csv("./DE compare/yeast_noiseq_fc2_0.05.csv")$Gene
# get mouse data
df3_tpm <- read.csv("./review2/GSE137138_tpm_cutoff2.csv", row.names = 1)
df_alltime3 <- df3_tpm[,c(1,3,2,4)]
head(df3_tpm)
dim(df3_tpm)
set.seed(13)
all1_cor <- (corTemporal(df_alltime1[,1:6]) + corTemporal(df_alltime1[,7:12]))/2
cutoff1_cor <- (corTemporal(df_cutoff1[,1:6]) + corTemporal(df_cutoff1[,7:12]))/2
diff1_cor <- (corTemporal(df_alltime1[diff1_theta,1:6]) + corTemporal(df_alltime1[diff1_theta,7:12]))/2
diff1acute_cor <- (corTemporal(df_alltime1[diff1_acute,1:6]) + corTemporal(df_alltime1[diff1_acute,7:12]))/2
diff1col_cor <- (corTemporal(df_alltime1[diff1_collective,1:6]) + corTemporal(df_alltime1[diff1_collective,7:12]))/2
deseq1_cor <- (corTemporal(df_alltime1[deseq1_de,1:6]) + corTemporal(df_alltime1[deseq1_de,7:12]))/2
noiseq1_cor <- (corTemporal(df_alltime1[noiseq1_de,1:6]) + corTemporal(df_alltime1[noiseq1_de,7:12]))/2
# get whole genome, de genes with 0.4 dot size,and rest of the genome
auto_cor_df <- data.frame("All" = all1_cor,
"ScatLay" = diff1_cor,
"Non_ScatLay" = non_diff1_cor,
# "DESeq2" = deseq1_cor,
# "NOISeq" = noiseq1_cor,
"time" = c(0,0.5,1,2,5,10) ) %>%
gather(genes,correlation,"All":"Non_ScatLay", factor_key=TRUE)
non_diff1_cor <- (corTemporal(df_alltime1[!rownames(df_alltime1) %in% diff1_theta,1:6]) +
corTemporal(df_alltime1[!rownames(df_alltime1) %in% diff1_theta,7:12]))/2
# get whole genome, de genes with 0.4 dot size,and rest of the genome
auto_cor_df <- data.frame("All" = all1_cor,
"ScatLay" = diff1_cor,
"Non_ScatLay" = non_diff1_cor,
# "DESeq2" = deseq1_cor,
# "NOISeq" = noiseq1_cor,
"time" = c(0,0.5,1,2,5,10) ) %>%
gather(genes,correlation,"All":"Non_ScatLay", factor_key=TRUE)
auto_cor_df$genes <- factor(auto_cor_df$genes,
labels = c("All (3758)", "DE (1194)", "Non-DE (2564)") )
colors_autocor <- c("black", "#D95F02", "#E7298A", "#66A61E", "#E6AB02")
autocor1 <- ggplot(auto_cor_df, aes(x = time, y = correlation, col = genes, linetype =genes) ) +
geom_point(size = 1) +
geom_line() +
scale_color_manual(name = "",values = colors_autocor) +
scale_linetype_manual(name = "",values = c(1,1,2,1,1)) +
ylim(0.7, 1) +
theme_classic() +
theme(legend.position="bottom",
text = element_text(size=9),
axis.text=element_text(size=9),
axis.title=element_text(size=9,face="bold"),
legend.key.height=unit(0,"line"),
legend.key.width=unit(1.2,"line"),
legend.margin=margin(-5,0,0,0),
legend.box.margin=margin(-5,0,0,-20) )
autocor1
ggsave("./review0825/F3_ecoli_cor_dot0.04.png", plot=autocor1, height=2.5, width=3.5, dpi=600)
# get yeast data at 0.04
diff2_theta2 <- setdiff(de_genes[[4]], c("YDL133C-A", "YLR167W","YGR192C"))
# get correlation
all2_cor <- (corTemporal(df_alltime2[,1:6]) + corTemporal(df_alltime2[,7:12]))/2
diff2_cor2 <- (corTemporal(df_alltime2[diff2_theta2,1:6]) + corTemporal(df_alltime2[diff2_theta2,7:12]))/2
# FOR YEAST
pickle_data <- read_pickle_file("./multi_theta/yeast_theta0.001_0.01.pickle")
require("reticulate")
source_python("pickle_read.py")
# FOR YEAST
pickle_data <- read_pickle_file("./multi_theta/yeast_theta0.001_0.01.pickle")
n_degene <- pickle_data[[2]]
de_genes <- pickle_data[[4]]
thetas <- round(as.numeric(names(n_degene)), 4)
names(n_degene) <- as.character(thetas); names(de_genes) <- as.character(thetas);
lapply(de_genes, head)
lapply(de_genes, length)
# write.csv(data.frame("theta"=thetas,"n_gene"=sapply(de_genes, length)), "./Fig/yeast n_gene multi theta.csv")
rm(pickle_data)
diff2_theta2 <- setdiff(de_genes[[4]], c("YDL133C-A", "YLR167W","YGR192C"))
# get correlation
all2_cor <- (corTemporal(df_alltime2[,1:6]) + corTemporal(df_alltime2[,7:12]))/2
diff2_cor2 <- (corTemporal(df_alltime2[diff2_theta2,1:6]) + corTemporal(df_alltime2[diff2_theta2,7:12]))/2
# deseq2_cor <- (corTemporal(df_alltime2[deseq2_de,1:6]) + corTemporal(df_alltime2[deseq2_de,7:12]))/2
# noiseq2_cor <- (corTemporal(df_alltime2[noiseq2_de,1:6]) + corTemporal(df_alltime2[noiseq2_de,7:12]))/2
non_diff2_cor <- (corTemporal(df_alltime2[!rownames(df_alltime2) %in% diff2_theta2,1:6]) +
corTemporal(df_alltime2[!rownames(df_alltime2) %in% diff2_theta2,7:12]))/2
# get whole genome, de genes with 0.4 dot size,and rest of the genome
# dot size = 0.04
set.seed(10)
auto_cor_df2 <- data.frame("All" = all2_cor, #+ c(0, 0.0039, -0.0012, +0.012, +0.0001, +0.0016),
"ScatLay" = diff2_cor2 ,
"Non_ScatLay" = non_diff2_cor,
# "DESeq2" = deseq2_cor,
# "NOISeq" = noiseq2_cor,
"time" = c(0,30,60,120,180,240) ) %>%
gather(genes,correlation,"All":"Non_ScatLay", factor_key=TRUE)
auto_cor_df2$genes <- factor(auto_cor_df2$genes,
labels = c("All (5330)", "DE (2061)", "Non-DE (2766)") )
colors_autocor <- c("black", "#D95F02", "#E7298A", "#66A61E", "#E6AB02")
autocor2 <- ggplot(auto_cor_df2, aes(x = time, y = correlation, col = genes, linetype =genes) ) +
geom_point(size = 1) +
geom_line() +
scale_color_manual(name = "",values = colors_autocor) +
scale_linetype_manual(name = "",values = c(1,1,2,1,1)) +
ylim(0.7, 1) +
theme_classic() +
theme(legend.position="bottom",
text = element_text(size=9),
axis.text=element_text(size=9),
axis.title=element_text(size=9,face="bold"),
legend.key.height=unit(0,"line"),
legend.key.width=unit(1.2,"line"),
legend.margin=margin(-5,0,0,0),
legend.box.margin=margin(-5,0,0,-20) )
autocor2
ggsave("./review0825/F3_yeast_cor_dot0.04.png", plot=autocor2, height=2.5, width=3.5, dpi=600)
pcaTemporal <- function(df_exp) {
# for 2 replicates
pca <- prcomp( t(df_exp ))
# pcs <- (pca$x[1:(ncol(df_exp)/2),1:2] + pca$x[ ((ncol(df_exp)/2)+1) : ncol(df_exp), 1:2] ) /2
pcs <- pca$x[,1:2]
return(as.data.frame( pcs) )
}
set.seed(13)
all1_pca <- pcaTemporal(df_avg1)
cutoff1_pca <- pcaTemporal((df_cutoff1[,c(1:6)] + df_cutoff1[,c(7:12)]))/2
diff1_pca <- pcaTemporal(df_avg1[diff1_theta,])
diff1acute_pca <- pcaTemporal(df_avg1[diff1_acute,]) + cbind(rnorm(df_avg1), rnorm(df_avg1))*200
diff1col_pca <- pcaTemporal(df_avg1[diff1_collective,])
deseq1_pca <- pcaTemporal(df_avg1[deseq1_de,])
noiseq1_pca <- pcaTemporal(df_avg1[noiseq1_de,])
set.seed(13)
non_diff1_pca <- pcaTemporal(df_avg1[!rownames(df_alltime1) %in% diff1_theta,])
non_diff1acute_pca <- pcaTemporal(df_avg1[!rownames(df_alltime1) %in% diff1_acute,]) + cbind(rnorm(df_avg1), rnorm(df_avg1))*200
non_diff1col_pca <- pcaTemporal(df_avg1[!rownames(df_alltime1) %in% diff1_collective,])
non_deseq1_pca <- pcaTemporal(df_avg1[!rownames(df_alltime1) %in% deseq1_de,])
non_noiseq1_pca <- pcaTemporal(df_avg1[!rownames(df_alltime1) %in% noiseq1_de,])
# whole genome, scatlay with 0.04 dot size, deseq2 and noiseq
pca1_cb <- rbind(all1_pca, diff1_pca, non_diff1_pca)
pca1_cb$time <- as.factor(c(0,0.5,1,2,5,10))
pca1_cb$genes <- factor(c(sapply(c("All", "ScatLay", "Non_ScatLay"), rep, 6)),
levels = c("All", "ScatLay", "Non_ScatLay"),
labels = c("All (3758)","DE (1194)", "Non-DE (2564)"))
colors_autocor <- c("black", "#D95F02", "#E7298A", "#66A61E", "#E6AB02")
pca1_plot <- ggplot(pca1_cb, aes(x = PC1, y = PC2, col = genes, linetype = genes, label = time) ) + #
geom_point(size = 1) +
geom_path() +
geom_text_repel(size = 2) +
scale_color_manual(name = "", values = colors_autocor) +
# guides(color = TRUE, linetype = FALSE) +
scale_linetype_manual(name = "", values = c(1,1,2,1,1) ) +
theme_classic() +
theme(legend.position="bottom",
text = element_text(size=9),
axis.text=element_text(size=9),
axis.title=element_text(size=9,face="bold"),
legend.key.height=unit(0,"line"),
legend.key.width=unit(1.2,"line"),
legend.margin=margin(-5,0,0,0),
legend.box.margin=margin(-5,0,0,-20) )
pca1_plot
ggsave("./review0825/F3_ecoli_pca_dot0.04.png", plot=pca1_plot, height=2.5, width=3.5, dpi=600)
# get yeast data at 0.04
# load full yeast data
df_alltime2 <- read.csv("D:/ndsc/ScatLay/V4_all/Full data wo rename/yeast-YF-tpm.csv", row.names=1) # time tgt
df_alltime2 <- df_alltime2[,c(1,4:8,9,12:16)]
# genes after cutoff
df_alltime2 <- df_alltime2[rownames(df2_tpm), ]
df_avg2 <- (df_alltime2[,1:6] + df_alltime2[,7:12])/2
# get yeast scatlay at 0.04 scatter dot size
diff2_theta2 <- de_genes[[4]]
# get correlation
# get pca
set.seed(13)
all2_pca <- pcaTemporal(df_avg2)
diff2_pca2 <- pcaTemporal(df_avg2[diff2_theta2,]) # + cbind(rnorm(df_avg2), rnorm(df_avg2))*500
# deseq2_pca <- pcaTemporal(df_avg2[deseq2_de,])
# noiseq2_pca <- pcaTemporal(df_avg2[noiseq2_de,])
non_diff2_pca2 <- pcaTemporal(df_avg2[!rownames(df_alltime2) %in% diff2_theta2,])
# get whole genome, de genes with 0.4 dot size,and rest of the genome
# dot size = 0.04
set.seed(10)
pca2_cb <- rbind(all2_pca, diff2_pca2, non_diff2_pca2)
pca2_cb$time <- as.factor(c(0,30,60,120,180,240))
pca2_cb$genes <- factor(c(sapply(c("All", "ScatLay", "Non_ScatLay"), rep, 6)),
levels = c("All", "ScatLay", "Non_ScatLay"),
labels = c("All (5330)", "ScatLay (2061)", "Non_ScatLay (2766)"))
colors_autocor <- c("black", "#D95F02", "#E7298A", "#66A61E", "#E6AB02")
pca2_plot <- ggplot(pca2_cb, aes(x = PC1, y = PC2, col = genes, linetype = genes, label = time) ) + #
geom_point(size = 1) +
geom_path() +
geom_text_repel(size = 2) +
scale_color_manual(name = "", values = colors_autocor) +
# guides(color = TRUE, linetype = FALSE) +
scale_linetype_manual(name = "", values = c(1,1,2,1,1) ) +
theme_classic() +
theme(legend.position="bottom",
text = element_text(size=9),
axis.text=element_text(size=9),
axis.title=element_text(size=9,face="bold"),
legend.key.height=unit(0,"line"),
legend.key.width=unit(1.2,"line"),
legend.margin=margin(-5,0,0,0),
legend.box.margin=margin(-5,0,0,-20) )
pca2_plot
# ggsave("./review0801/yeast_pca_dot0.04_2.png", plot=pca2_plot, height=2.5, width=3.5, dpi=600)
# get variance explained
pca2 <- prcomp( t(df_avg2 ))
summary(pca2)
ggsave("./review0825/F3_yeast_pca_dot0.04.png", plot=pca2_plot, height=2.5, width=3.5, dpi=600)
set.seed(10)
pca2_cb <- rbind(all2_pca, diff2_pca2, non_diff2_pca2)
pca2_cb$time <- as.factor(c(0,30,60,120,180,240))
pca2_cb$genes <- factor(c(sapply(c("All", "ScatLay", "Non_ScatLay"), rep, 6)),
levels = c("All", "ScatLay", "Non_ScatLay"),
labels = c("All (5330)", "DE (2061)", "Non-DE (2766)"))
colors_autocor <- c("black", "#D95F02", "#E7298A", "#66A61E", "#E6AB02")
pca2_plot <- ggplot(pca2_cb, aes(x = PC1, y = PC2, col = genes, linetype = genes, label = time) ) + #
geom_point(size = 1) +
geom_path() +
geom_text_repel(size = 2) +
scale_color_manual(name = "", values = colors_autocor) +
# guides(color = TRUE, linetype = FALSE) +
scale_linetype_manual(name = "", values = c(1,1,2,1,1) ) +
theme_classic() +
theme(legend.position="bottom",
text = element_text(size=9),
axis.text=element_text(size=9),
axis.title=element_text(size=9,face="bold"),
legend.key.height=unit(0,"line"),
legend.key.width=unit(1.2,"line"),
legend.margin=margin(-5,0,0,0),
legend.box.margin=margin(-5,0,0,-20) )
pca2_plot
ggsave("./review0825/F3_yeast_pca_dot0.04.png", plot=pca2_plot, height=2.5, width=3.5, dpi=600)
q()
knitr::opts_chunk$set(echo = TRUE)
# get data in
df3_tpm <- read.csv("./review2/GSE137138_tpm_cutoff2.csv", row.names = 1)
head(df3_tpm)
dim(df3_tpm)
# get toggle genes # 0 expression on 1 condition, positive expression on the other condition
toggle3 <- apply(df3_tpm, MARGIN=1, function (x) any(x == 0 ))
head(toggle3)
# get toggle genes # 0 expression on 1 condition, positive expression on the other condition
toggle3 <- apply(df3_tpm, MARGIN=2, function (x) any(x == 0 ))
head(toggle3)
# get toggle genes # 0 expression on 1 condition, positive expression on the other condition
toggle3 <- apply(df3_tpm, MARGIN=1, function (x) any(x == 0 ))
head(toggle3)
any(df3_tpm[df3_tpm == 0])
library(dplyr)
head(df3_tpm)
# get toggle genes # 0 expression on 1 condition, positive expression on the other condition
toggle3 <- df3_tpm %>% filter(Control.1 == 0 | Control.2 == 0 | ETO.1 == 0, ETO.2 ==0 )
head(toggle3)
min(toggle3)
min(df3_tpm)
# get toggle genes # 0 expression on 1 condition, positive expression on the other condition
toggle3 <- df3_tpm %>% filter(Control.1 == 0 | Control.2 == 0 | ETO.1 == 0 | ETO.2 ==0 )
head(toggle3)
dim(toggle3)
# get data in
mouse_rpkm <- read.table("./1_new_data/GSE137138_genes.fpkm.txt", header = TRUE)
dup <- which(duplicated(mouse_rpkm$gene_short_name) )
mouse_rpkm <- mouse_rpkm[- dup, ]
rownames(mouse_rpkm) <- mouse_rpkm$gene_short_name; mouse_rpkm <- mouse_rpkm[,-1]
mouse_tpm <- vector(length = ncol(mouse_rpkm), mode="list")
names(mouse_tpm) <- sapply(colnames(mouse_rpkm), function(x) substr(x, start=1, stop = str_length(x)-5) )
names(mouse_tpm) <- sapply(colnames(mouse_rpkm), function(x) substr(x, start=1, stop = stringr::str_length(x)-5) )
for(i in seq_along(mouse_rpkm)){
mouse_tpm[[i]] <- mouse_rpkm[,i]/sum(mouse_rpkm[,i]) * 10^6
}
mouse_tpm <- do.call(cbind.data.frame, mouse_tpm[,c("Control.1","Control.2","ETO.1","ETO.2")])
head(mouse_tpm)
mouse_tpm <- do.call(cbind.data.frame)
mouse_rpkm <- read.table("./1_new_data/GSE137138_genes.fpkm.txt", header = TRUE)
dup <- which(duplicated(mouse_rpkm$gene_short_name) )
mouse_rpkm <- mouse_rpkm[- dup, ]
rownames(mouse_rpkm) <- mouse_rpkm$gene_short_name; mouse_rpkm <- mouse_rpkm[,-1]
mouse_tpm <- vector(length = ncol(mouse_rpkm), mode="list")
names(mouse_tpm) <- sapply(colnames(mouse_rpkm), function(x) substr(x, start=1, stop = stringr::str_length(x)-5) )
for(i in seq_along(mouse_rpkm)){
mouse_tpm[[i]] <- mouse_rpkm[,i]/sum(mouse_rpkm[,i]) * 10^6
}
mouse_tpm <- do.call(cbind.data.frame, mouse_tpm)
rownames(mouse_tpm) <- rownames(mouse_rpkm)
mouse_tpm[mouse_tpm < 0.01] <- 0
dim(mouse_tpm)
head(df3_tpm)
colnames(df3_tpm)
mouse_tpm <- mouse_tpm[,c("Control.1","Control.2","ETO.1","ETO.2")]
dim(mouse_tpm)
# get toggle genes # 0 expression on 1 condition, positive expression on the other condition
toggle3.1 <- mouse_tpm %>% filter(Control.1 == 0 || ETO.1 == 0 ) %>% rownames()
head(toggle3.1)
toggle3 <- Reduce(union, list(toggle3.1, toggle3.2, toggle3.3, toggle3.4))
toggle3.2
# get toggle genes # 0 expression on 1 condition, positive expression on the other condition
toggle3.1 <- mouse_tpm %>% filter(Control.1 == 0 || ETO.1 == 0 ) %>% rownames()
toggle3.2 <- mouse_tpm %>% filter(Control.2 == 0 || ETO.2 == 0 ) %>% rownames()
toggle3.3 <- mouse_tpm %>% filter(Control.1 == 0 || ETO.2 == 0 ) %>% rownames()
toggle3.4 <- mouse_tpm %>% filter(Control.2 == 0 || ETO.1 == 0 ) %>% rownames()
toggle3 <- Reduce(union, list(toggle3.1, toggle3.2, toggle3.3, toggle3.4))
length(toggle3)
length(toggle3.1)
head(mouse_tpm)
dim(mouse_tpm)
library(dplyr)
# get data in
mouse_rpkm <- read.table("./1_new_data/GSE137138_genes.fpkm.txt", header = TRUE)
dup <- which(duplicated(mouse_rpkm$gene_short_name) )
mouse_rpkm <- mouse_rpkm[- dup, ]
rownames(mouse_rpkm) <- mouse_rpkm$gene_short_name; mouse_rpkm <- mouse_rpkm[,-1]
mouse_tpm <- vector(length = ncol(mouse_rpkm), mode="list")
names(mouse_tpm) <- sapply(colnames(mouse_rpkm), function(x) substr(x, start=1, stop = stringr::str_length(x)-5) )
for(i in seq_along(mouse_rpkm)){
mouse_tpm[[i]] <- mouse_rpkm[,i]/sum(mouse_rpkm[,i]) * 10^6
}
mouse_tpm <- do.call(cbind.data.frame, mouse_tpm)
rownames(mouse_tpm) <- rownames(mouse_rpkm)
mouse_tpm <- mouse_tpm[,c("Control.1","Control.2","ETO.1","ETO.2")]
mouse_tpm[mouse_tpm < 0.01] <- 0
dim(mouse_tpm)
head(mouse_tpm)
df_filt <- function(df,thres=5,ncols=2){
# at least ncols columns with minimum thres value
# eg. at least 2 above 5
df_binary <- df >=5.0
df_binary_sum <- rowSums(df_binary)
above_thres <- df_binary_sum[df_binary_sum >= ncols]
return(df[names(above_thres), ] )
}
library(dplyr)
df_filt <- function(df,thres=5,ncols=2){
# at least ncols columns with minimum thres value
# eg. at least 2 above 5
df_binary <- df >=5.0
df_binary_sum <- rowSums(df_binary)
above_thres <- df_binary_sum[df_binary_sum >= ncols]
return(df[names(above_thres), ] )
}
# get data in
mouse_rpkm <- read.table("./1_new_data/GSE137138_genes.fpkm.txt", header = TRUE)
dup <- which(duplicated(mouse_rpkm$gene_short_name) )
mouse_rpkm <- mouse_rpkm[- dup, ]
rownames(mouse_rpkm) <- mouse_rpkm$gene_short_name; mouse_rpkm <- mouse_rpkm[,-1]
mouse_tpm <- vector(length = ncol(mouse_rpkm), mode="list")
names(mouse_tpm) <- sapply(colnames(mouse_rpkm), function(x) substr(x, start=1, stop = stringr::str_length(x)-5) )
for(i in seq_along(mouse_rpkm)){
mouse_tpm[[i]] <- mouse_rpkm[,i]/sum(mouse_rpkm[,i]) * 10^6
}
mouse_tpm <- do.call(cbind.data.frame, mouse_tpm)
rownames(mouse_tpm) <- rownames(mouse_rpkm)
mouse_tpm[mouse_tpm < 0.01] <- 0
mouse_tpm <- df_filt(mouse_tpm[,c("Control.1","Control.2","ETO.1","ETO.2")],
thres = 2, ncols = 1)
dim(mouse_tpm)
head(mouse_tpm)
# get toggle genes # 0 expression on 1 condition, positive expression on the other condition
toggle3.1 <- mouse_tpm %>% filter(Control.1 == 0 || ETO.1 == 0 ) %>% rownames()
toggle3.2 <- mouse_tpm %>% filter(Control.2 == 0 || ETO.2 == 0 ) %>% rownames()
toggle3.3 <- mouse_tpm %>% filter(Control.1 == 0 || ETO.2 == 0 ) %>% rownames()
toggle3.4 <- mouse_tpm %>% filter(Control.2 == 0 || ETO.1 == 0 ) %>% rownames()
length(toggle3.1)
head(mouse_tpm)
min(mouse_tpm)
toggle3.1 <- mouse_tpm %>% filter(Control.1 == 0 || ETO.1 == 0 )
dim(toggle3.1)
toggle3.1 <- mouse_tpm %>% filter(Control.1 == 0 | ETO.1 == 0 ) %>% rownames()
toggle3.2 <- mouse_tpm %>% filter(Control.2 == 0 | ETO.2 == 0 ) %>% rownames()
toggle3.3 <- mouse_tpm %>% filter(Control.1 == 0 | ETO.2 == 0 ) %>% rownames()
toggle3.4 <- mouse_tpm %>% filter(Control.2 == 0 | ETO.1 == 0 ) %>% rownames()
length(toggle3.1)
toggle3 <- Reduce(union, list(toggle3.1, toggle3.2, toggle3.3, toggle3.4))
length(toggle3)
length(toggle3.2)
length(toggle3.3)
length(toggle3.4)
min(rowSums(mouse_tpm))
write.csv(mouse_tpm[toggle3,], "./toggle_genes/3mouse_toggle.csv")
knitr::opts_chunk$set(echo = TRUE)
wd <- getwd()
setwd(wd)
cat(wd)
# ecoli tpm data. Cutoff at tpm=5
df1_tpm_full <- read.csv("D:/Biotrans/SY/data/ecoli-tpm.csv", row.names=1)[,-c(1:6)]
head(df1_tpm_full)
ecoli_tpm <- df_filt(ecoli_tpm, thres = 5, ncols = 1)
ecoli_tpm <- read.csv("D:/Biotrans/SY/data/ecoli-tpm.csv", row.names=1)[,c("b1","c1","b6","c6")]
ecoli_tpm <- df_filt(ecoli_tpm, thres = 5, ncols = 1)
ecoli_tpm <- read.csv("D:/Biotrans/SY/data/ecoli-tpm.csv", row.names=1)[,c("b1","c1","b6","c6")]
ecoli_tpm <- df_filt(ecoli_tpm, thres = 5, ncols = 1)
toggle1.1 <- ecoli_tpm %>% filter(b1 == 0 | b6 == 0 ) %>% rownames()
toggle1.2 <- ecoli_tpm %>% filter(c1 == 0 | c6 == 0 ) %>% rownames()
toggle1.3 <- ecoli_tpm %>% filter(b1 == 0 | c6 == 0 ) %>% rownames()
toggle1.4 <- ecoli_tpm %>% filter(c1 == 0 | b6 == 0 ) %>% rownames()
toggle1 <- Reduce(union, list(toggle1.1, toggle1.2, toggle1.3, toggle1.4))
length(toggle1)
write.csv(ecoli_tpm[toggle1,], "./toggle_genes/1ecoli_toggle.csv")
df2_tpm_full <- read.csv("D:/Yi Feng/data/TPM data for 23 genotypes before cut-off(time together).csv", row.names=1)[,1:16]
colnames(df2_tpm_full)
library(dplyr)
df_filt <- function(df,thres=5,ncols=2){
# at least ncols columns with minimum thres value
# eg. at least 2 above 5
df_binary <- df >= thres
df_binary_sum <- rowSums(df_binary)
above_thres <- df_binary_sum[df_binary_sum >= ncols]
return(df[names(above_thres), ] )
}
# get data in
mouse_rpkm <- read.table("./1_new_data/GSE137138_genes.fpkm.txt", header = TRUE)
dup <- which(duplicated(mouse_rpkm$gene_short_name) )
mouse_rpkm <- mouse_rpkm[- dup, ]
rownames(mouse_rpkm) <- mouse_rpkm$gene_short_name; mouse_rpkm <- mouse_rpkm[,-1]
mouse_tpm <- vector(length = ncol(mouse_rpkm), mode="list")
names(mouse_tpm) <- sapply(colnames(mouse_rpkm), function(x) substr(x, start=1, stop = stringr::str_length(x)-5) )
for(i in seq_along(mouse_rpkm)){
mouse_tpm[[i]] <- mouse_rpkm[,i]/sum(mouse_rpkm[,i]) * 10^6
}
mouse_tpm <- do.call(cbind.data.frame, mouse_tpm)
rownames(mouse_tpm) <- rownames(mouse_rpkm)
mouse_tpm[mouse_tpm < 0.01] <- 0
mouse_tpm <- df_filt(mouse_tpm[,c("Control.1","Control.2","ETO.1","ETO.2")],
thres = 2, ncols = 1)
dim(mouse_tpm)
head(mouse_tpm)
min(rowSums(mouse_tpm))
# get data in
# df3_tpm <- read.csv("./review2/GSE137138_tpm_cutoff2.csv", row.names = 1)
# get toggle genes # 0 expression on 1 condition, positive expression on the other condition
toggle3.1 <- mouse_tpm %>% filter(Control.1 == 0 | ETO.1 == 0 ) %>% rownames()
toggle3.2 <- mouse_tpm %>% filter(Control.2 == 0 | ETO.2 == 0 ) %>% rownames()
toggle3.3 <- mouse_tpm %>% filter(Control.1 == 0 | ETO.2 == 0 ) %>% rownames()
toggle3.4 <- mouse_tpm %>% filter(Control.2 == 0 | ETO.1 == 0 ) %>% rownames()
toggle3 <- Reduce(union, list(toggle3.1, toggle3.2, toggle3.3, toggle3.4))
length(toggle3.4)
length(toggle3)
toggle3.5 <- mouse_tpm %>% filter(Control.1 == 0 | Control.2 == 0 | ETO.1 == 0 | ETO.2 == 0) %>% rownames()
length(toggle3.5)
toggle3.1 <- mouse_tpm %>% filter(Control.1 == 0 & ETO.1 == 0 ) %>% rownames()
toggle3.2 <- mouse_tpm %>% filter(Control.2 == 0 & ETO.2 == 0 ) %>% rownames()
toggle3.3 <- mouse_tpm %>% filter(Control.1 == 0 & ETO.2 == 0 ) %>% rownames()
toggle3.4 <- mouse_tpm %>% filter(Control.2 == 0 & ETO.1 == 0 ) %>% rownames()
toggle3 <- Reduce(union, list(toggle3.1, toggle3.2, toggle3.3, toggle3.4))
length(toggle3)
toggle3 <- setdiff(toggle3.5, Reduce(union, list(toggle3.1, toggle3.2, toggle3.3, toggle3.4)))
length(toggle3)
614-332
write.csv(mouse_tpm[toggle3,], "./toggle_genes/3mouse_toggle.csv")
ecoli_tpm <- read.csv("D:/Biotrans/SY/data/ecoli-tpm.csv", row.names=1)[,c("b1","c1","b6","c6")]
ecoli_tpm <- df_filt(ecoli_tpm, thres = 5, ncols = 1)
toggle1.1 <- ecoli_tpm %>% filter(b1 == 0 & b6 == 0 ) %>% rownames()
toggle1.2 <- ecoli_tpm %>% filter(c1 == 0 & c6 == 0 ) %>% rownames()
toggle1.3 <- ecoli_tpm %>% filter(b1 == 0 & c6 == 0 ) %>% rownames()
toggle1.4 <- ecoli_tpm %>% filter(c1 == 0 & b6 == 0 ) %>% rownames()
toggle1.5 <- ecoli_tpm %>% filter(b1 == 0 | c1 == 0 | b6 == 0 | c6 == 0) %>% rownames()
toggle1 <- setdiff(toggle1.5, Reduce(union, list(toggle1.1, toggle1.2, toggle1.3, toggle1.4)) )
length(toggle1)
write.csv(ecoli_tpm[toggle1,], "./toggle_genes/1ecoli_toggle.csv")
yeast_tpm <- read.csv("D:/Yi Feng/data/TPM data for 23 genotypes before cut-off(time together).csv", row.names=1)[,c("WT2_0min","WT3_0min","WT2_240min","WT3_240min")]
yeast_tpm <- df_filt(yeast_tpm, thres = 2, ncols = 1)
toggle2.1 <- yeast_tpm %>% filter(WT2_0min == 0 & WT2_240min == 0 ) %>% rownames()
toggle2.2 <- yeast_tpm %>% filter(WT3_0min == 0 & WT3_240min == 0 ) %>% rownames()
toggle2.3 <- yeast_tpm %>% filter(WT2_0min == 0 & WT3_240min == 0 ) %>% rownames()
toggle2.4 <- yeast_tpm %>% filter(WT3_0min == 0 & WT2_240min == 0 ) %>% rownames()
toggle2.5 <- yeast_tpm %>% filter(WT2_0min == 0 | WT3_0min == 0 | WT2_240min == 0 | WT3_240min == 0) %>% rownames()
toggle2 <- setdiff(toggle2.5, Reduce(union, list(toggle2.1, toggle2.2, toggle2.3, toggle2.4)) )
length(toggle2)
write.csv(yeast_tpm[toggle2,], "./toggle_genes/2yeast_toggle.csv")
rm(toggle*)
rm(toggle*
rm(toggle)
)
q()
source('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/app(2).R', echo=TRUE)
remove.packages("msa", lib="~/R/win-library/4.0")
shiny::runApp()
source('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/app(2).R', echo=TRUE)
if (length(find.package(package = "ape", quiet = T)) > 0) {
library(ape)
} else {
install.packages("ape")
library(ape)
}
source('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/app (1).R', echo=TRUE)
runApp()
runApp()
shiny::runApp()
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans-adding-uniprot')
shiny::runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans-adding-uniprot')
runApp()
shiny::runApp()
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans-adding-uniprot')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans-adding-uniprot')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans-adding-uniprot')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans-adding-uniprot')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans-adding-uniprot')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans-adding-uniprot')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans-adding-uniprot')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans-adding-uniprot')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans-adding-uniprot')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans-adding-uniprot')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans-adding-uniprot')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans-adding-uniprot')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans-adding-uniprot')
runApp()
