<<<<<<< HEAD
rm(y,lrt,fit)
res2 <- edgerApply(DS=counts(set2),f=x,W_1=pData(set2)$W_1,f1="Ctl",f2="Trt")
res.de2 <- edgerFilter(res2,FC=2, p_val=0.05)
dim(res.de2)
pData(set2)$W_1
topTags(lrt)
design <- model.matrix(~x + W_1, data=pData(set2))   #construct design matrix
y <- DGEList(counts=counts(set2), group=x)        # counts(set1) = extract raw counts
y <- calcNormFactors(y, method="upperquartile")   # upper quartile normalization
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmFit(y, design)
lrt <- glmLRT(fit)  #,coef=2   # lrt = likelihood ratio test
crt <- makeContrasts(contrasts=paste("Trt","Ctl",sep="-"),levels=design)
design
design <- model.matrix(~0+x + W_1, data=pData(set2))   #construct design matrix
y <- DGEList(counts=counts(set2), group=x)        # counts(set1) = extract raw counts
y <- calcNormFactors(y, method="upperquartile")   # upper quartile normalization
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmFit(y, design)
lrt <- glmLRT(fit)  #,coef=2   # lrt = likelihood ratio test
# crt <- makeContrasts(contrasts=paste("Trt","Ctl",sep="-"),levels=design)
res <- as.data.frame(topTags(lrt, n=nrow(filtered)))
res$log2FCabs <- abs(res$logFC)
res$Gene <- rownames(res)
res.de <- filter(res, log2FCabs>=1, FDR<=0.05)
dim(res.de)res.de
dim(res.de)
design
colnames(design)[1:2] <- c("Ctl","Trt")
crt <- makeContrasts(contrasts=paste("Trt","Ctl",sep="-"),levels=design)
res <- as.data.frame(topTags(lrt, n=nrow(filtered), contrast=crt ))
lrt <- glmLRT(fit, contrast=crt)  #,coef=2   # lrt = likelihood ratio test
res <- as.data.frame(topTags(lrt, n=nrow(filtered)))
res$log2FCabs <- abs(res$logFC)
res$Gene <- rownames(res)
res.de <- filter(res, log2FCabs>=1, FDR<=0.05)
dim(res.de)
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
rm(list=ls())
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/DE.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/DE.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
scale(c(1,2,5,6,8,7))
class(scale(c(1,2,5,6,8,7)))
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
aa <- NULL
aa[[3]]
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
aa = c("a","b","c")
bb <- c("d","e","f")
any(bb %in% aa)
aa = list("NULL","aa","cc")
any(is.null(aa))
is.null(aa)
aa
sapply(aa, is.null)
aa = list(NULL,"aa","cc")
any(is.null(aa))
sapply(aa, is.null)
any(sapply(aa, is.null))
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
is.numeric(c("aa","bb"))
is.numeric(c("1","2.8"))
is.numeric(c(1,2.8))
as.character(c(1,2,3,4))
is.numeric(as.character(c(1,2,3,4)))
aa <- as.factor(c("a","b","c"))
aa
is.character(aa)
is.factor(aa)
mypalette<-brewer.pal(7,"Greens")
image(1:7,1,as.matrix(1:7),col=mypalette,xlab="Greens (sequential)",
ylab="",xaxt="n",yaxt="n",bty="n")
mypalette
brewer.pal(2,"Greens")
brewer.pal(45,"Greens")
aa <- brewer.pal(45,"Greens")
aa[12]
aa <- brewer.pal(45,"info2")
aa <- brewer.pal(45,"set1")
aa <- brewer.pal(45,"Set1")
aa
brewer.pal.info
name = "Set1"
brewer.pal.info[rownames(brewer.pal.info)==name,"maxcolors"]
ceiling(45/9)
ceiling(46/9)
div(10,4)
10 %% 4
makeColorBrewer <- function(n,name = "Set1"){
require(RColorBrewer)
max_n <- brewer.pal.info[rownames(brewer.pal.info)==name,"maxcolors"]
if (n <= max_n){
cols <- brewer.pal(n,name)
=======
traj1_df$time <- ttimes[[i]]
traj1_df$gene_set <- gene_sets[[1]]
# remove ncRNA genes
traj2_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep2_columns])) /2
traj2_df$time <- ttimes[[i]]
traj2_df$gene_set <- gene_sets[[2]]
# remove toggle rep
traj3_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep2_columns])) /2
traj3_df$time <- ttimes[[i]]
traj3_df$gene_set <- gene_sets[[3]]
# remove toggle cond
traj4_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep2_columns])) /2
traj4_df$time <- ttimes[[i]]
traj4_df$gene_set <- gene_sets[[4]]
# randomly chosen m genes, m = number of ncRNA genes, loop 100 times and get average
m = floor(length(all_genes)/5)
for(j in 1:100){
rand_genes <- sample(setdiff(all_genes, high_exp_genes[[i]]), m)
traj5_dfi <- (pcaTemporal(tpm_full[rand_genes, rep1_columns]) +
pcaTemporal(tpm_full[rand_genes, rep2_columns])) /2
if(j > 1){
traj5_df_sum <- traj5_df_sum + traj5_dfi
} else {
traj5_df_sum <- traj5_dfi
}
}
traj5_df <- traj5_df_sum/100
traj5_df$time <- ttimes[[i]]
traj5_df$gene_set <- gene_sets[[5]]
# top expressed, n = number of toggle genes, loop 100 times and get average
n = floor(length(all_genes)/5)
aa <- aa[order(aa[,1]),]; top_genes <- rownames(tail(aa, n)); rm(aa)
traj6_df <-(pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep2_columns])) /2
traj6_df$time <- ttimes[[i]]
traj6_df$gene_set <- gene_sets[[4]]
# plot together
traj_all <- rbind(traj1_df, traj2_df, traj3_df, traj4_df, traj5_df, traj6_df)
traj_all
pj <- position_jitter(width = 0.02*max(traj_all$PC1), height = 0.02*max(traj_all$PC2))
pca4_plot <- ggplot(traj_all, aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) + #label = time
geom_point(size = 1, position = pj) +
geom_path(position = pj, arrow = arrow(ends = "last"), show.legend = FALSE) +
geom_path(position = pj) +
# geom_text_repel(size = 2) +
scale_color_manual(name = "", values = colors_traj) +
# guides(color = TRUE, linetype = FALSE) +
ggtitle(full_time_cell_types[i]) +
scale_linetype_manual(name = "", values = c(1,1,2,2,2,2) ) +
theme_classic() +
theme(legend.position="bottom",
text = element_text(size=9),
axis.text=element_text(size=9),
axis.title=element_text(size=9), # ,face="bold"
legend.key.height=unit(0,"line"),
legend.key.width=unit(0.8,"line"),
legend.margin=margin(-5,0,0,0),
legend.box.margin=margin(-5,0,0,-30) ) +
guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
pca4_plot
ggsave(paste0("./Fig/pp1/F6",letters[i],".png"), plot = pca4_plot, height=3.8, width=4, dpi=300)
# small window zoom-in
#   pca4s_plot <- ggplot(tail(traj_all, length(rep1_columns)*2),
#                        aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) +
#     geom_point(size = 0.5, position = pj, show.legend = FALSE) +
#     geom_path(position = pj, size = 0.5, arrow = arrow(ends = "last", length = unit(0.1, "native")), show.legend = FALSE) +
#     # geom_text_repel(size = 2) +
#     scale_color_manual(name = "", values = colors_traj[c(5:6)]) +
#     # guides(color = TRUE, linetype = FALSE) +
#     # ggtitle(full_time_cell_types[i]) +
#     scale_linetype_manual(name = "", values = c(2,2) ) +
#     theme_classic() +
#     theme(plot.margin = unit(c(0,0,0,0), "mm"),
#           axis.line = element_line(size = 0.4),
#           axis.ticks = element_line(size = 0.5),
#           # axis.ticks.length = unit(0.5, "native"),
#           text = element_text(size=6),
#           # axis.text=element_text(size=3),
#           axis.title=element_blank(),
#           panel.background = element_rect(fill = "transparent"), # bg of the panel
#           plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
#           panel.grid.major = element_blank(), # get rid of major grid
#           panel.grid.minor = element_blank(), # get rid of minor grid
#           legend.background = element_rect(fill = "transparent"), # get rid of legend bg
#           legend.box.background = element_rect(fill = "transparent") ) +
#     guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
#   pca4s_plot
#   ggsave(paste0("./Fig/pp1/F2",letters[i],"s.png"), plot = pca4s_plot, bg = "transparent",
#          height=1, width=1, dpi=300)
}
# run the chunk of getting all genes, ncRNAs, toggle genes replicate, toggle genes condition
# chunk names: get full data, 1a, 1c, 1d
for(i in seq_along(full_time_cell_types)) {
tpm_full <- read.csv(full_time_links[i], row.names = 1)
rep1_columns <- seq(1, ncol(tpm_full)-1, 2); rep2_columns <- seq(2, ncol(tpm_full)-1, 2)
tpm_full <- tpm_full[list_all_genes[[ match_cols2[i] ]], ]
toggle_rep <- toggle_genes_list_rep[[ match_cols2[i] ]]
toggle_cond <- toggle_genes_list_cond[[ match_cols2[i] ]]
all_genes <- rownames(tpm_full)
ncRNAs <- rownames(tpm_full[tpm_full$biotype != "protein_coding", ])
head(toggle_rep)
gene_sets <- c(paste0("Whole transcriptome(", length(all_genes), ")"),
paste0("Minus ncRNAs(", length(setdiff(all_genes, ncRNAs)), ")"),
paste0("Minus toggle replicate(", length(setdiff(all_genes, toggle_rep)), ")"),
paste0("Minus toggle condition(", length(setdiff(all_genes, toggle_cond)), ")"),
paste0("Random ", round(length(all_genes)/10), " genes (10% transcriptome)"),
paste0("Top 5% transcriptome") )
gene_sets <- factor(gene_sets, levels = gene_sets)
colors_traj_named <- colors_traj; names(colors_traj_named) <- gene_sets
# whole genome
traj1_df <- (pcaTemporal(tpm_full[setdiff(all_genes, high_exp_genes[[i]]), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, high_exp_genes[[i]]), rep2_columns])) /2
traj1_df$time <- ttimes[[i]]
traj1_df$gene_set <- gene_sets[[1]]
# remove ncRNA genes
traj2_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep2_columns])) /2
traj2_df$time <- ttimes[[i]]
traj2_df$gene_set <- gene_sets[[2]]
# remove toggle rep
traj3_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep2_columns])) /2
traj3_df$time <- ttimes[[i]]
traj3_df$gene_set <- gene_sets[[3]]
# remove toggle cond
traj4_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep2_columns])) /2
traj4_df$time <- ttimes[[i]]
traj4_df$gene_set <- gene_sets[[4]]
# randomly chosen m genes, m = number of ncRNA genes, loop 100 times and get average
m = floor(length(all_genes)/5)
for(j in 1:100){
rand_genes <- sample(setdiff(all_genes, high_exp_genes[[i]]), m)
traj5_dfi <- (pcaTemporal(tpm_full[rand_genes, rep1_columns]) +
pcaTemporal(tpm_full[rand_genes, rep2_columns])) /2
if(j > 1){
traj5_df_sum <- traj5_df_sum + traj5_dfi
} else {
traj5_df_sum <- traj5_dfi
}
}
traj5_df <- traj5_df_sum/100
traj5_df$time <- ttimes[[i]]
traj5_df$gene_set <- gene_sets[[5]]
# top expressed, n = number of toggle genes, loop 100 times and get average
n = floor(length(all_genes)/5)
aa <- tpm_full[order(tpm_full[,1]),]; top_genes <- rownames(tail(aa, n)); rm(aa)
traj6_df <-(pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep2_columns])) /2
traj6_df$time <- ttimes[[i]]
traj6_df$gene_set <- gene_sets[[4]]
# plot together
traj_all <- rbind(traj1_df, traj2_df, traj3_df, traj4_df, traj5_df, traj6_df)
traj_all
pj <- position_jitter(width = 0.02*max(traj_all$PC1), height = 0.02*max(traj_all$PC2))
pca4_plot <- ggplot(traj_all, aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) + #label = time
geom_point(size = 1, position = pj) +
geom_path(position = pj, arrow = arrow(ends = "last"), show.legend = FALSE) +
geom_path(position = pj) +
# geom_text_repel(size = 2) +
scale_color_manual(name = "", values = colors_traj) +
# guides(color = TRUE, linetype = FALSE) +
ggtitle(full_time_cell_types[i]) +
scale_linetype_manual(name = "", values = c(1,1,2,2,2,2) ) +
theme_classic() +
theme(legend.position="bottom",
text = element_text(size=9),
axis.text=element_text(size=9),
axis.title=element_text(size=9), # ,face="bold"
legend.key.height=unit(0,"line"),
legend.key.width=unit(0.8,"line"),
legend.margin=margin(-5,0,0,0),
legend.box.margin=margin(-5,0,0,-30) ) +
guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
pca4_plot
ggsave(paste0("./Fig/pp1/F6",letters[i],".png"), plot = pca4_plot, height=3.8, width=4, dpi=300)
# small window zoom-in
#   pca4s_plot <- ggplot(tail(traj_all, length(rep1_columns)*2),
#                        aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) +
#     geom_point(size = 0.5, position = pj, show.legend = FALSE) +
#     geom_path(position = pj, size = 0.5, arrow = arrow(ends = "last", length = unit(0.1, "native")), show.legend = FALSE) +
#     # geom_text_repel(size = 2) +
#     scale_color_manual(name = "", values = colors_traj[c(5:6)]) +
#     # guides(color = TRUE, linetype = FALSE) +
#     # ggtitle(full_time_cell_types[i]) +
#     scale_linetype_manual(name = "", values = c(2,2) ) +
#     theme_classic() +
#     theme(plot.margin = unit(c(0,0,0,0), "mm"),
#           axis.line = element_line(size = 0.4),
#           axis.ticks = element_line(size = 0.5),
#           # axis.ticks.length = unit(0.5, "native"),
#           text = element_text(size=6),
#           # axis.text=element_text(size=3),
#           axis.title=element_blank(),
#           panel.background = element_rect(fill = "transparent"), # bg of the panel
#           plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
#           panel.grid.major = element_blank(), # get rid of major grid
#           panel.grid.minor = element_blank(), # get rid of minor grid
#           legend.background = element_rect(fill = "transparent"), # get rid of legend bg
#           legend.box.background = element_rect(fill = "transparent") ) +
#     guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
#   pca4s_plot
#   ggsave(paste0("./Fig/pp1/F2",letters[i],"s.png"), plot = pca4s_plot, bg = "transparent",
#          height=1, width=1, dpi=300)
}
traj6_df
# run the chunk of getting all genes, ncRNAs, toggle genes replicate, toggle genes condition
# chunk names: get full data, 1a, 1c, 1d
for(i in seq_along(full_time_cell_types)) {
tpm_full <- read.csv(full_time_links[i], row.names = 1)
rep1_columns <- seq(1, ncol(tpm_full)-1, 2); rep2_columns <- seq(2, ncol(tpm_full)-1, 2)
tpm_full <- tpm_full[list_all_genes[[ match_cols2[i] ]], ]
toggle_rep <- toggle_genes_list_rep[[ match_cols2[i] ]]
toggle_cond <- toggle_genes_list_cond[[ match_cols2[i] ]]
all_genes <- rownames(tpm_full)
ncRNAs <- rownames(tpm_full[tpm_full$biotype != "protein_coding", ])
head(toggle_rep)
gene_sets <- c(paste0("Whole transcriptome(", length(all_genes), ")"),
paste0("Minus ncRNAs(", length(setdiff(all_genes, ncRNAs)), ")"),
paste0("Minus toggle replicate(", length(setdiff(all_genes, toggle_rep)), ")"),
paste0("Minus toggle condition(", length(setdiff(all_genes, toggle_cond)), ")"),
paste0("Random ", round(length(all_genes)/10), " genes (10% transcriptome)"),
paste0("Top 5% transcriptome") )
gene_sets <- factor(gene_sets, levels = gene_sets)
colors_traj_named <- colors_traj; names(colors_traj_named) <- gene_sets
# whole genome
traj1_df <- (pcaTemporal(tpm_full[setdiff(all_genes, high_exp_genes[[i]]), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, high_exp_genes[[i]]), rep2_columns])) /2
traj1_df$time <- ttimes[[i]]
traj1_df$gene_set <- gene_sets[[1]]
# remove ncRNA genes
traj2_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep2_columns])) /2
traj2_df$time <- ttimes[[i]]
traj2_df$gene_set <- gene_sets[[2]]
# remove toggle rep
traj3_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep2_columns])) /2
traj3_df$time <- ttimes[[i]]
traj3_df$gene_set <- gene_sets[[3]]
# remove toggle cond
traj4_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep2_columns])) /2
traj4_df$time <- ttimes[[i]]
traj4_df$gene_set <- gene_sets[[4]]
# randomly chosen m genes, m = number of ncRNA genes, loop 100 times and get average
m = floor(length(all_genes)/5)
for(j in 1:100){
rand_genes <- sample(setdiff(all_genes, high_exp_genes[[i]]), m)
traj5_dfi <- (pcaTemporal(tpm_full[rand_genes, rep1_columns]) +
pcaTemporal(tpm_full[rand_genes, rep2_columns])) /2
if(j > 1){
traj5_df_sum <- traj5_df_sum + traj5_dfi
} else {
traj5_df_sum <- traj5_dfi
}
}
traj5_df <- traj5_df_sum/100
traj5_df$time <- ttimes[[i]]
traj5_df$gene_set <- gene_sets[[5]]
# top expressed, n = number of toggle genes, loop 100 times and get average
n = floor(length(all_genes)/5)
aa <- tpm_full[order(tpm_full[,1]),]; top_genes <- rownames(tail(aa, n)); rm(aa)
traj6_df <-(pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep2_columns])) /2
traj6_df$time <- ttimes[[i]]
traj6_df$gene_set <- gene_sets[[6]]
# plot together
traj_all <- rbind(traj1_df, traj2_df, traj3_df, traj4_df, traj5_df, traj6_df)
traj_all
pj <- position_jitter(width = 0.02*max(traj_all$PC1), height = 0.02*max(traj_all$PC2))
pca4_plot <- ggplot(traj_all, aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) + #label = time
geom_point(size = 1, position = pj) +
geom_path(position = pj, arrow = arrow(ends = "last"), show.legend = FALSE) +
geom_path(position = pj) +
# geom_text_repel(size = 2) +
scale_color_manual(name = "", values = colors_traj) +
# guides(color = TRUE, linetype = FALSE) +
ggtitle(full_time_cell_types[i]) +
scale_linetype_manual(name = "", values = c(1,1,2,2,2,2) ) +
theme_classic() +
theme(legend.position="bottom",
text = element_text(size=9),
axis.text=element_text(size=9),
axis.title=element_text(size=9), # ,face="bold"
legend.key.height=unit(0,"line"),
legend.key.width=unit(0.8,"line"),
legend.margin=margin(-5,0,0,0),
legend.box.margin=margin(-5,0,0,-30) ) +
guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
pca4_plot
ggsave(paste0("./Fig/pp1/F6",letters[i],".png"), plot = pca4_plot, height=3.8, width=4, dpi=300)
# small window zoom-in
#   pca4s_plot <- ggplot(tail(traj_all, length(rep1_columns)*2),
#                        aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) +
#     geom_point(size = 0.5, position = pj, show.legend = FALSE) +
#     geom_path(position = pj, size = 0.5, arrow = arrow(ends = "last", length = unit(0.1, "native")), show.legend = FALSE) +
#     # geom_text_repel(size = 2) +
#     scale_color_manual(name = "", values = colors_traj[c(5:6)]) +
#     # guides(color = TRUE, linetype = FALSE) +
#     # ggtitle(full_time_cell_types[i]) +
#     scale_linetype_manual(name = "", values = c(2,2) ) +
#     theme_classic() +
#     theme(plot.margin = unit(c(0,0,0,0), "mm"),
#           axis.line = element_line(size = 0.4),
#           axis.ticks = element_line(size = 0.5),
#           # axis.ticks.length = unit(0.5, "native"),
#           text = element_text(size=6),
#           # axis.text=element_text(size=3),
#           axis.title=element_blank(),
#           panel.background = element_rect(fill = "transparent"), # bg of the panel
#           plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
#           panel.grid.major = element_blank(), # get rid of major grid
#           panel.grid.minor = element_blank(), # get rid of minor grid
#           legend.background = element_rect(fill = "transparent"), # get rid of legend bg
#           legend.box.background = element_rect(fill = "transparent") ) +
#     guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
#   pca4s_plot
#   ggsave(paste0("./Fig/pp1/F2",letters[i],"s.png"), plot = pca4s_plot, bg = "transparent",
#          height=1, width=1, dpi=300)
}
head(tpm_full)
var(tpm_full[rep1_columns,])
var(t(tpm_full[,rep1_columns]))
var(tpm_full[,rep1_columns])
var(tpm_full[1,rep1_columns])
var(1:10)
tpm_full[1,rep1_columns]
aa <- apply(tpm_full[,rep1_columns], margin = 1, var)
aa <- apply(tpm_full[,rep1_columns], margin = 1, FUN = var)
aa <- apply(tpm_full[,rep1_columns], MARGIN = 1, var)
head(aa)
# run the chunk of getting all genes, ncRNAs, toggle genes replicate, toggle genes condition
# chunk names: get full data, 1a, 1c, 1d
for(i in seq_along(full_time_cell_types)) {
tpm_full <- read.csv(full_time_links[i], row.names = 1)
rep1_columns <- seq(1, ncol(tpm_full)-1, 2); rep2_columns <- seq(2, ncol(tpm_full)-1, 2)
tpm_full <- tpm_full[list_all_genes[[ match_cols2[i] ]], ]
toggle_rep <- toggle_genes_list_rep[[ match_cols2[i] ]]
toggle_cond <- toggle_genes_list_cond[[ match_cols2[i] ]]
all_genes <- rownames(tpm_full)
ncRNAs <- rownames(tpm_full[tpm_full$biotype != "protein_coding", ])
head(toggle_rep)
gene_sets <- c(paste0("Whole transcriptome(", length(all_genes), ")"),
paste0("Minus ncRNAs(", length(setdiff(all_genes, ncRNAs)), ")"),
paste0("Minus toggle replicate(", length(setdiff(all_genes, toggle_rep)), ")"),
paste0("Minus toggle condition(", length(setdiff(all_genes, toggle_cond)), ")"),
paste0("Random ", round(length(all_genes)/10), " genes (10% transcriptome)"),
paste0("Top 5% transcriptome") )
gene_sets <- factor(gene_sets, levels = gene_sets)
colors_traj_named <- colors_traj; names(colors_traj_named) <- gene_sets
# whole genome
traj1_df <- (pcaTemporal(tpm_full[setdiff(all_genes, high_exp_genes[[i]]), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, high_exp_genes[[i]]), rep2_columns])) /2
traj1_df$time <- ttimes[[i]]
traj1_df$gene_set <- gene_sets[[1]]
# remove ncRNA genes
traj2_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep2_columns])) /2
traj2_df$time <- ttimes[[i]]
traj2_df$gene_set <- gene_sets[[2]]
# remove toggle rep
traj3_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep2_columns])) /2
traj3_df$time <- ttimes[[i]]
traj3_df$gene_set <- gene_sets[[3]]
# remove toggle cond
traj4_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep2_columns])) /2
traj4_df$time <- ttimes[[i]]
traj4_df$gene_set <- gene_sets[[4]]
# randomly chosen m genes, m = number of ncRNA genes, loop 100 times and get average
m = floor(length(all_genes)/5)
for(j in 1:100){
rand_genes <- sample(setdiff(all_genes, high_exp_genes[[i]]), m)
traj5_dfi <- (pcaTemporal(tpm_full[rand_genes, rep1_columns]) +
pcaTemporal(tpm_full[rand_genes, rep2_columns])) /2
if(j > 1){
traj5_df_sum <- traj5_df_sum + traj5_dfi
>>>>>>> online-version
} else {
col1 <- brewer.pal(max_n,name)
cols <- rep(col1, floor(n/max_n))
cols <- c(cols, col1[1:n%%max_n])
}
}
aa <- makeColorBrewer(13)
aa
13%%9
makeColorBrewer <- function(n,name = "Set1"){
require(RColorBrewer)
max_n <- brewer.pal.info[rownames(brewer.pal.info)==name,"maxcolors"]
if (n <= max_n){
cols <- brewer.pal(n,name)
} else {
col1 <- brewer.pal(max_n,name)
cols <- rep(col1, floor(n/max_n))
cols <- c(cols, col1[1:(n%%max_n)])
}
return(cols)
}
aa <- makeColorBrewer(13)
aa
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
rm(list = ls())
<<<<<<< HEAD
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
knitr::opts_chunk$set(echo = TRUE)
wd <- getwd()
setwd(wd)
yeast_de_link <- "C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/Test data/yeast_de.csv"
de_df <- read.csv(yeast_de_link)
fg <- as.character(de_df[,1])
orgDb = org.Sc.sgd.db
keyType = "ENSEMBL"
all_genes <- keys(orgDb, keytype = keyType)
temp <- goPrep(fg=fg,bg=NULL,keyType,orgDb)
length(temp[[1]])
length(temp[[2]])
length(all_genes)
if(keyType != "ENTREZID"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ENTREZID",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ENTREZID",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
fg_mapped=temp[[1]]; bg_mapped=temp[[2]]
ont="BP"; pvalueCutoff=0.01
if(keyType != "ENTREZID"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ENTREZID",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ENTREZID",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
length(bg_mapped)
length(fg_mapped)
head(bg_mapped)
bg_mapped[1:4]
bg_mapped[1]
params <- new("GOHyperGParams",
geneIds=fg_mapped,
universeGeneIds=bg_mapped,
annotation=orgDb,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
duplicated(fg_mapped)
params <- new("GOHyperGParams",
geneIds=unique(fg_mapped),
universeGeneIds=unique(bg_mapped),
annotation=orgDb,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
any(fg_mapped %in% bg_mapped)
fg_mapped[1] %in% bg_mapped
head(fg_mapped)
head(bg_mapped)
tail(fg_mapped)
tail(bg_mapped)
params <- new("GOHyperGParams",
geneIds=unique(fg_mapped),
universeGeneIds=unique(bg_mapped),
annotation=org.Sc.db,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
org.Sc.db
org.Sc.sgd.db
if(keyType != "SGD"){
bg_mapped <- mapIds(orgDb,bg_mapped,"SGD",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"SGD",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
fg_mapped=temp[[1]]; bg_mapped=temp[[2]]
ont="BP"; pvalueCutoff=0.01
if(keyType != "SGD"){
bg_mapped <- mapIds(orgDb,bg_mapped,"SGD",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"SGD",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
params <- new("GOHyperGParams",
geneIds=unique(fg_mapped),
universeGeneIds=unique(bg_mapped),
annotation=org.Sc.db,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
params <- new("GOHyperGParams",
geneIds=unique(fg_mapped),
universeGeneIds=unique(bg_mapped),
annotation=orgDb,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
params <- new("GOHyperGParams",
geneIds=temp[[1]],
universeGeneIds=temp[[2]],
annotation=orgDb,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
df <- summary(hgOver)
head(df)
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
head(orgDb)
head(keys(orgDb))
head(keys(orgDb,keytype = "SGD"))
head(keys(org.Sc.sgdENTREZID))
head(keys(org.Sc.sgdENSEMBL))
head(keys(org.Sc.sgdSGD))
head(keys(org.Sc.sgd.DB))
head(keys(org.Sc.sgd.db))
head(keys(org.Sc.sgdENTREZID))
head(keys(orgDb,keytype = "ENTREZ"))
head(keys(orgDb,keytype = "ENTREZID"))
head(keys(org.Sc.sgdENTREZID))
head(keys(org.Sc.sgdSGD))
org.Sc.sgd()
head(org.Sc.sgdENTREZID)
org.Sc.sgdENTREZID
head(keys(org.Sc.sgdENTREZID))
head(keys(org.Hs.egGENENAME))
head(keys(org.Hs.egENTREZID))
org.Hs.eg()
head(keys(org.Hs.egENSEMBL))
head(keys(org.Hs.eg.db))
head(keys(org.Hs.eg.db,keytype = "ENSEMBL"))
head(keys(org.Hs.eg.db,keytype = "GENENAME"))
org.Hs.egENSEMBL
Lkeys(org.Sc.sgdSGD)
head(Lkeys(org.Sc.sgdSGD))
head(Rkeys(org.Sc.sgdSGD))
head(Rkeys(org.Sc.sgdENTREZID))
if(keyType != "ENTREZID"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ENTREZID",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ENTREZID",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
temp <- goPrep(fg=fg,bg=NULL,keyType,orgDb)
gostats <- gostatsApply(fg_mapped=temp[[1]],bg_mapped=temp[[2]],keyType,orgDb,ont="BP",pvalueCutoff=0.01)
fg_mapped=temp[[1]]; bg_mapped=temp[[2]]
ont="BP"; pvalueCutoff=0.01
if(keyType != "ENTREZID"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ENTREZID",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ENTREZID",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
params <- new("GOHyperGParams",
geneIds=temp[[1]],
universeGeneIds=temp[[2]],
annotation=org.Sc.sgdENTREZID,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
fg_mapped=temp[[1]]; bg_mapped=temp[[2]]
ont="BP"; pvalueCutoff=0.01
if(keyType != "ENTREZID"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ENTREZID",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ENTREZID",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
params <- new("GOHyperGParams",
geneIds=temp[[1]],
universeGeneIds=temp[[2]],
annotation=org.Sc.sgdENTREZID,
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
params <- new("GOHyperGParams",
geneIds=temp[[1]],
universeGeneIds=temp[[2]],
annotation="org.Sc.sgd.db",
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
df <- summary(hgOver)
head(keys(org.Hs.eg.db))
head(keys(org.Hs.egENTREZID))
head(Rkeys(org.Hs.egENSEMBL))
org.Hs.eg_dbschema()
head(keys(org.Sc.sgd.db, keytype = "ORF"))
head(keys(org.Sc.sgd.db, keytype = "ENSEMBL"))
params <- new("GOHyperGParams",
geneIds=fg_mapped,
universeGeneIds=bg_mapped,
annotation="org.Sc.sgd.db",
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
head(keys(org.Sc.sgd.db))
head(fg_mapped)
if(keyType != "ORF"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ORF",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ORF",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
keyType
fg_mapped=temp[[1]]; bg_mapped=temp[[2]]
ont="BP"; pvalueCutoff=0.01
if(keyType != "ORF"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ORF",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ORF",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
head(bg_mapped)
head(fg_mapped)
params <- new("GOHyperGParams",
geneIds=fg_mapped,
universeGeneIds=bg_mapped,
annotation="org.Sc.sgd.db",
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
df <- summary(hgOver)
head(df)
keytypes(org.Hs.eg.db)
keytypes(org.At.tair.db)
head(keys(org.Pf.plasmo.db))
head(keys(org.Pf.plasmo.db,keytype = "ENTREZID"))
keytypes(org.Pf.plasmo.db)
head(keys(org.Pf.plasmo.db,keytype = "ENTREZID"))
head(keys(org.EcK12.eg.db,keytype = "ENTREZID"))
hu.ensl <- head(keys(org.Hs.eg.db,keytype = "ENSEMBL"))
mapIds(org.Hs.eg.db,hu.ensl,"ENTREZID","ENSEMBL")
orgDb == org.Ce.eg.db
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(statmod)
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
as.data.frame(NULL)
summary(NULL)
knitr::opts_chunk$set(echo = TRUE)
wd <- getwd()
setwd(wd)
yeast_de_link <- "C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/Test data/yeast_de.csv"
de_df <- read.csv(yeast_de_link)
fg <- as.character(de_df[,1])
orgDb = org.Sc.sgd.db
keyType = "ENSEMBL"
all_genes <- keys(orgDb, keytype = keyType)
ks <-  keytypes(orgDb)
for(kk in ks){
cat("ks is ",kk,"\n")
print(head(keys(orgDb, keytype = kk)))
}
temp <- goPrep(fg=fg,bg=NULL,keyType,orgDb)
fg_mapped=temp[[1]]; bg_mapped=temp[[2]]
ont="BP"; pvalueCutoff=0.01
if(keyType != "ORF"){
bg_mapped <- mapIds(orgDb,bg_mapped,"ORF",keyType)
bg_mapped <- bg_mapped[!is.na(bg_mapped)]
fg_mapped <- mapIds(orgDb,fg_mapped,"ORF",keyType)
fg_mapped <- fg_mapped[!is.na(fg_mapped)]
}
params <- new("GOHyperGParams",
geneIds=fg_mapped,
universeGeneIds=bg_mapped,
annotation="org.Sc.sgd.db",
ontology=ont,
pvalueCutoff=pvalueCutoff,
conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
head(as.data.frame(hgOver))
head(summary(hgOver))
head(summary(NULL))
aa <- summary(NULL)
dim(aa)
is.data.frame(aa)
is.null(aa)
aa
bb <- as.data.frame(aa)
bb <- as.data.frame(NULL)
bb
is.null(bb)
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("debrowser")
library(debrowser)
startDEBrowser()
library(devtools)
install_github("PF2-pasteur-fr/SARTools", build_vignettes=TRUE)
vignette("SARTools")
vignette("SARTools")
library(SARTools)
vignette("SARTools")
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp(ABioTrans)
runApp(ABioTrans.R)
getwd()
setwd("C:/Users/BUITT/Dropbox/Biotrans/ABioTrans")
runApp(ABioTrans.R)
runApp("ABioTrans.R")
runApp('ABioTrans.R')
wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
wd
wd == getwd()
runApp("ABioTrans.R")
! wd == getwd()
runApp("ABioTrans.R")
wd
runApp("ABioTrans.R")
library(shiny); runApp('ABioTrans.R')
runApp('ABioTrans.R')
runApp('ABioTrans.R')
runApp('ABioTrans.R')
=======
q()
shiny::runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans')
DS
getwd()
setwd("C:\\Users\\BUITT\\Dropbox\\Biotrans\\ABioTrans")
DS <- read.csv("./Test data/Yeast-hypoxia")
DS <- read.csv("./Test data/Yeast-hypoxia/yeast_nm.csv")
DS <- read.csv("./Test data/Yeast-hypoxia/yeast_nm.csv", row.names)
DS <- read.csv("./Test data/Yeast-hypoxia/yeast_nm.csv", row.names = 1)
tsne2.data <- log10(DS+1)
perplexity_value <- 10
no_of_pca = 6
tsne_val <- Rtsne(t(tsne2.data),
dims = 2,
initial_dims = no_of_pca,
perplexity = perplexity_value,
theta = 0.0)
tsne_df <- data.frame(
TSNE1 = tsne_val$Y[, 1],
TSNE2 = tsne_val$Y[, 2],
Sample = colnames(tsne2.data)
)
num <- 6
kmeans.result <- kmeans(tsne_df[,1:2], num)
kmeans.result
tsne_cluster_num <- as.numeric(input$tsne_cluster_num)
tsne_kmeans_result <- kmeans(tsne_df[,1:2], tsne_cluster_num)
tsne_cluster_num <- num
tsne_cluster_num <- as.numeric(input$tsne_cluster_num)
tsne_kmeans_result <- kmeans(tsne_df[,1:2], tsne_cluster_num)
tsne_kmeans_result <- kmeans(tsne_df[,1:2], tsne_cluster_num)
dim(tsne_df)
# plotting
p <- plot_ly(data = tsne_df, x = ~TSNE1, y = ~TSNE2, text = ~Sample, color = ~cluster ) %>%
add_trace(type = "scatter", mode = 'markers', opacity = 0.5)
p
tsne_df$cluster <- tsne_kmeans_result
# plotting
p <- plot_ly(data = tsne_df, x = ~TSNE1, y = ~TSNE2, text = ~Sample, color = ~cluster ) %>%
add_trace(type = "scatter", mode = 'markers', opacity = 0.5)
p
tsne_kmeans_result$cluster
tsne_df$cluster <- tsne_kmeans_result$cluster
p <- plot_ly(data = tsne_df, x = ~TSNE1, y = ~TSNE2, text = ~Sample, color = ~cluster ) %>%
add_trace(type = "scatter", mode = 'markers', opacity = 0.5)
p
tsne_df$cluster <- factor(tsne_kmeans_result$cluster, levels = 1:max(tsne_kmeans_result$cluster) )
p <- plot_ly(data = tsne_df, x = ~TSNE1, y = ~TSNE2, text = ~Sample, color = ~cluster ) %>%
add_trace(type = "scatter", mode = 'markers', opacity = 0.5)
p
p <- plot_ly(data = tsne_df, x = ~TSNE1, y = ~TSNE2, text = ~Sample, color = ~cluster ) %>%
add_trace(type = "scatter", mode = 'markers', opacity = 0.5)
p
runApp()
q()
>>>>>>> online-version
