### 6 scatter for each biotype
toggle_de_ecoli <- toggleGene(tpm_df_ecoli[rownames(tpm_df_ecoli) %in% scatlay_ecoli, ])
table(tpm_df_ecoli[toggle_de_ecoli, "biotype"])
# scatter of non-toggle DE genes
att1 <- scatterBiotype2(tpm_df_ecoli[rownames(tpm_df_ecoli) %in% setdiff(scatlay_ecoli, toggle_de_ecoli), ],
cell_type = "ecoli")
p_scatter1 <- ggarrange(plotlist = att1[[1]],
ncol=2, nrow = ceiling(length(att1[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter1
file_name1 <- paste0("./Fig/multi_attractor/F12a_ecoli_scatter_replicate.png")
ggsave(file_name1, plot =  p_scatter1, height=2*ceiling(length(att1[[1]])/2), width=4, dpi=300)
# scatter of toggle
att2 <- scatterBiotype2(tpm_df_ecoli[rownames(tpm_df_ecoli) %in% toggle_de_ecoli, ],
cell_type = "ecoli")
p_scatter2 <- ggarrange(plotlist = att2[[1]],
ncol=2, nrow = ceiling(length(att2[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter2
file_name2 <- paste0("./Fig/multi_attractor/F12b_DEtoggle_ecoli_scatter_replicate.png")
ggsave(file_name2, plot =  p_scatter2, height=2*ceiling(length(att2[[1]])/2), width=4, dpi=300)
### 6 scatter for each biotype
toggle_de_bacillus <- toggleGene(tpm_df_bacillus[rownames(tpm_df_bacillus) %in% scatlay_bacillus, ])
table(tpm_df_bacillus[toggle_de_bacillus, "biotype"])
# scatter of non-toggle DE genes
att1 <- scatterBiotype2(tpm_df_bacillus[rownames(tpm_df_bacillus) %in% setdiff(scatlay_bacillus, toggle_de_bacillus), ],
cell_type = "bacillus")
p_scatter1 <- ggarrange(plotlist = att1[[1]],
ncol=2, nrow = ceiling(length(att1[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter1
file_name1 <- paste0("./Fig/multi_attractor/F12a_bacillus_scatter_replicate.png")
ggsave(file_name1, plot =  p_scatter1, height=2*ceiling(length(att1[[1]])/2), width=4, dpi=300)
# scatter of toggle
att2 <- scatterBiotype2(tpm_df_bacillus[rownames(tpm_df_bacillus) %in% toggle_de_bacillus, ],
cell_type = "bacillus")
p_scatter2 <- ggarrange(plotlist = att2[[1]],
ncol=2, nrow = ceiling(length(att2[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter2
file_name2 <- paste0("./Fig/multi_attractor/F12b_DEtoggle_bacillus_scatter_replicate.png")
ggsave(file_name2, plot =  p_scatter2, height=2*ceiling(length(att2[[1]])/2), width=4, dpi=300)
q()
knitr::opts_chunk$set(echo = TRUE)
# helper function in utils.R file
source("utils.R")
library(tidyverse)
library(ggpubr)
library(gridExtra)
## test
# aa <- corBiotype1(tpm.df, de_scatlay, cell_type = "mouse_macr")
# aa[[1]]
# aa[[2]]
# de_merged <- tpm.df[rownames(tpm.df)%in% de_scatlay, ]
# aa2 <- corBiotype2(tpm.df[rownames(tpm.df)%in% de_scatlay, ], cell_type = "mouse_macr")
# aa2
# get data tpm cutoff
tpm_df_prol <- read.csv("./data_processed/mouse_proliferative_lession_tpm.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_prol)
# get scatlay genes, merge with biotype for each gene
scatlay_prol <- read.csv("./data_processed/mouse_proliferative_lession_tpm_log_10_theta_0.003.csv")$common
scatlay_prol <- scatlay_prol[scatlay_prol != ""]
### 3
# density and scatter plot by non-de genes
pp_list_prol <- scatterBiotype(tpm_df_prol[rownames(tpm_df_prol) %in% scatlay_prol, ],
cell_type = "mouse proliferative thyroid", mode = 1)
pp_list_prol[[1]]
pp_list_prol[[2]]
ggsave("./Fig/F3c_dist_biotype_cancer_mouse_thyroid.png", plot =  ggarrange(pp_list_prol[[2]], legend = "right"),
height=2.4, width=4, dpi=300)
knitr::opts_chunk$set(echo = TRUE)
# helper function in utils.R file
source("utils.R")
library(tidyverse)
library(ggpubr)
library(gridExtra)
## test
# aa <- corBiotype1(tpm.df, de_scatlay, cell_type = "mouse_macr")
# aa[[1]]
# aa[[2]]
# de_merged <- tpm.df[rownames(tpm.df)%in% de_scatlay, ]
# aa2 <- corBiotype2(tpm.df[rownames(tpm.df)%in% de_scatlay, ], cell_type = "mouse_macr")
# aa2
# helper function in utils.R file
source("utils.R")
library(tidyverse)
library(ggpubr)
library(gridExtra)
## test
# aa <- corBiotype1(tpm.df, de_scatlay, cell_type = "mouse_macr")
# aa[[1]]
# aa[[2]]
# de_merged <- tpm.df[rownames(tpm.df)%in% de_scatlay, ]
# aa2 <- corBiotype2(tpm.df[rownames(tpm.df)%in% de_scatlay, ], cell_type = "mouse_macr")
# aa2
# get data tpm cutoff
tpm_df_bacillus <- read.csv("./data_processed/bacillus_tpm_cutoff2.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_bacillus)
# get scatlay genes, merge with biotype for each gene
scatlay_bacillus <- read.csv("./data_processed/bacillus_tpm_cutoff2_log_10_theta_0.006.csv")$common
### 2 cor of each type of biotype
cor_biotype2_bacillus <- corBiotype2(tpm_df_bacillus[rownames(tpm_df_bacillus) %in% scatlay_bacillus, ], cell_type = "bacillus")
## get correlation by biotypes:
corBiotype2 <- function(de_merged, cell_type, btw_mode = "condition", ...){
# get correlation for each biotype, within DE genes.
if(! any(colnames(de_merged) %in% "biotype")){
warning("No biotype found, check input dataframe")
return (null);
}
if(!any(colnames(de_merged) %in% "gene_id") ){
de_merged$gene_id <- rownames(de_merged)
# de_merged <- de_merged[,-which(colnames(de_merged) == "gene_id")]
}
de_merged <- de_merged[moveme(names(de_merged), "gene_id first")] # move gene_id to first column
# grouping the biotypes
de_merged <- left_join(de_merged, biotype_grouped[,c("biotype","biotype_grouped2")], by = "biotype")
de_merged <- de_merged[,-which(colnames(de_merged) == "biotype")]
colnames(de_merged)[which(colnames(de_merged) == "biotype_grouped2")] <- "biotype"
# getting the biotypes
biotypes <- unique(de_merged$biotype)
column_name <- c("biotype", "cor", "mean_exp", "mean_FC" ,"n_genes")
# get between condition or between replicate
cor_positions <- NULL
if(btw_mode == "condition"){
cor_positions <- c(3,4,7,8)
}
else if(btw_mode == "replicate") {
cor_positions <- c(2, 15)
}
if(is.null(cor_positions) ){
warning("btw_mode must be 'condition' or 'replicate' ")
return (null);
}
# getting cor
out_df <- data.frame(matrix(vector(), length(biotypes)+1, length(column_name),
dimnames=list(c(), column_name )),
stringsAsFactors=F)
out_df[1,] <- c("All_DE", mean(cor(de_merged[, 2:5], ...)[cor_positions]),
median(sapply(de_merged[, 2:5], mean)),
nrow(de_merged))
# get fold change
tpm_avg <- data.frame("gene_id" = de_merged$gene_id,
"avg1" = (de_merged[,2] + de_merged[,3])/2,
"avg2" = (de_merged[,4] + de_merged[,5])/2,
"biotype" = de_merged$biotype  )
fcs <- apply(tpm_avg[,2:3], MARGIN = 1, function(x) max(x)/(min(x)+0.001) )
tpm_avg$FC <- fcs
for(i in seq_along(biotypes)){
cor_i <- mean(cor(de_merged[de_merged$biotype == biotypes[i], 2:5], ...)[cor_positions])
n_genes_i <- nrow(de_merged[de_merged$biotype == biotypes[i], 2:5])
mean_exp_i <- median(sapply(de_merged[de_merged$biotype == biotypes[i], 2:5], mean))
mean_fc_i <- mean(tpm_avg[tpm_avg$biotype == biotypes[i], "FC"])
out_df[i+1, "biotype"] <- biotypes[i]
out_df[i+1, "cor"] <- cor_i
out_df[i+1, "mean_exp"] <- mean_exp_i
out_df[i+1, "mean_FC"] <- mean_fc_i
out_df[i+1, "n_genes"] <- n_genes_i
}
out_df$cell_type <- cell_type
return(out_df)
}
### 2 cor of each type of biotype
cor_biotype2_bacillus <- corBiotype2(tpm_df_bacillus[rownames(tpm_df_bacillus) %in% scatlay_bacillus, ], cell_type = "bacillus")
de_merged <- tpm_df_bacillus[rownames(tpm_df_bacillus) %in% scatlay_bacillus, ]
cell_type = "bacillus"
btw_mode = "condition"
# getting the biotypes
biotypes <- unique(de_merged$biotype)
column_name <- c("biotype", "cor", "mean_exp", "mean_FC" ,"n_genes")
cor_positions <- c(3,4,7,8)
# helper function in utils.R file
source("utils.R")
library(tidyverse)
library(ggpubr)
library(gridExtra)
## test
# aa <- corBiotype1(tpm.df, de_scatlay, cell_type = "mouse_macr")
# aa[[1]]
# aa[[2]]
# de_merged <- tpm.df[rownames(tpm.df)%in% de_scatlay, ]
# aa2 <- corBiotype2(tpm.df[rownames(tpm.df)%in% de_scatlay, ], cell_type = "mouse_macr")
# aa2
### 2 cor of each type of biotype
cor_biotype2_bacillus <- corBiotype2(tpm_df_bacillus[rownames(tpm_df_bacillus) %in% scatlay_bacillus, ], cell_type = "bacillus")
write.table(cor_biotype2_bacillus, "clipboard", sep = "\t", row.names = FALSE)
# get data tpm cutoff
tpm_df_ecoli <- read.csv("./data_processed/ecoli_tpm_cutoff_5.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_ecoli)
# get scatlay genes, merge with biotype for each gene
scatlay_ecoli <- read.csv("./data_processed/ecoli_scatlayDE_biotype.csv")$gene_id
### 2 cor of each type of biotype
cor_biotype2_ecoli <- corBiotype2(tpm_df_ecoli[rownames(tpm_df_ecoli) %in% scatlay_ecoli, ], cell_type = "ecoli")
write.table(cor_biotype2_ecoli, "clipboard", sep = "\t", row.names = FALSE)
# get data tpm cutoff
tpm_df_yeast <- read.csv("./data_processed/yeast_tpm_cutoff_2.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_yeast)
# get scatlay genes, merge with biotype for each gene
scatlay_yeast <- read.csv("./data_processed/yeast_scatlayDE_biotype.csv")$gene_id
### 2 cor of each type of biotype
cor_biotype2_yeast <- corBiotype2(tpm_df_yeast[rownames(tpm_df_yeast) %in% scatlay_yeast, ],
cell_type = "yeast", method = "pearson")
cor_biotype2_yeast
write.table(cor_biotype2_yeast, "clipboard", sep = "\t", row.names = FALSE)
# get data tpm cutoff
tpm_df_yarrow <- read.csv("./data_processed/yarrow_tpm_cutoff2.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_yarrow)
# get scatlay genes, merge with biotype for each gene
scatlay_yarrow <- read.csv("./data_processed/yarrow_tpm_cutoff2_log_10_theta_0.004.csv")$common
### 1
### 2 cor of each type of biotype
cor_biotype2_yarrow <- corBiotype2(tpm_df_yarrow[rownames(tpm_df_yarrow) %in% scatlay_yarrow, ],
cell_type = "yarrow", method = "spearman")
cor_biotype2_yarrow
write.table(cor_biotype2_yarrow, "clipboard", sep = "\t", row.names = FALSE)
# get data tpm cutoff
tpm_df_mouse <- read.csv("./data_processed/mouse_macrophage_1tpm_GSE160640.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_mouse)
# get scatlay genes, merge with biotype for each gene
scatlay_mouse <- read.csv("./data_processed/mouse_macrophage_1tpm_GSE160640_log_10_theta_0.002.csv")$common
### 1
### 2 cor of each type of biotype
cor_biotype2_mouse <- corBiotype2(tpm_df_mouse[rownames(tpm_df_mouse) %in% scatlay_mouse, ],
cell_type = "mouse")
cor_biotype2_mouse
write.table(cor_biotype2_mouse, "clipboard", sep = "\t", row.names = FALSE)
# get data tpm cutoff
tpm_df_human <- read.csv("./data_processed/human_treg_tpm_cutoff_5.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_human)
# get scatlay genes, merge with biotype for each gene
scatlay_human <- read.csv("./data_processed/human_treg_scatlay0.002.csv")$scatlay
### 2 cor of each type of biotype
cor_biotype2_human <- corBiotype2(tpm_df_human[rownames(tpm_df_human) %in% scatlay_human, ],
cell_type = "human")
write.table(cor_biotype2_human, "clipboard", sep = "\t", row.names = FALSE)
# get data tpm cutoff
tpm_df_ks <- read.csv("./data_processed/cancer_human_KS.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_ks)
# get scatlay genes, merge with biotype for each gene
scatlay_ks <- read.csv("./data_processed/cancer_human_KS_log_10_theta_0.003.csv")$common
scatlay_ks <- scatlay_ks[scatlay_ks != ""]
### 2 cor of each type of biotype
cor_biotype2_ks <- corBiotype2(tpm_df_ks[rownames(tpm_df_ks) %in% scatlay_ks, ],
cell_type = "human sarcoma")
write.table(cor_biotype2_ks, "clipboard", sep = "\t", row.names = FALSE)
# get data tpm cutoff
tpm_df_breast <- read.csv("./data_processed/cancer_human_breast.csv", row.names = 1)
head(tpm_df_breast)
cor(tpm_df_breast[,1:4])
tpm_df_breast_log <- tpm_df_breast
tpm_df_breast_log[,1:4] <- log10(tpm_df_breast[1:4] + 1)
cor_biotype2_breast <- corBiotype2(tpm_df_breast[rownames(tpm_df_breast) %in% scatlay_breast, ],
cell_type = "human breast cancer")
# get scatlay genes, merge with biotype for each gene
scatlay_breast <- read.csv("./data_processed/cancer_human_breast_log_10_theta_0.005.csv")$common
scatlay_breast <- scatlay_breast[scatlay_breast != ""]
cor_biotype2_breast <- corBiotype2(tpm_df_breast[rownames(tpm_df_breast) %in% scatlay_breast, ],
cell_type = "human breast cancer")
cor_biotype2_breast
write.table(cor_biotype2_breast, "clipboard", sep = "\t", row.names = FALSE)
tpm_df_prol <- read.csv("./data_processed/mouse_proliferative_lession_tpm.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_prol)
# get scatlay genes, merge with biotype for each gene
scatlay_prol <- read.csv("./data_processed/mouse_proliferative_lession_tpm_log_10_theta_0.003.csv")$common
scatlay_prol <- scatlay_prol[scatlay_prol != ""]
### 2 cor of each type of biotype
cor_biotype2_prol <- corBiotype2(tpm_df_prol[rownames(tpm_df_prol) %in% scatlay_prol, ],
cell_type = "mouse proliferative thyroid")
write.table(cor_biotype2_prol, "clipboard", sep = ";", row.names = FALSE)
cor_biotype2_prol <- corBiotype2(tpm_df_prol[rownames(tpm_df_prol) %in% scatlay_prol, ],
cell_type = "mouse proliferative thyroid")
write.table(cor_biotype2_prol, "clipboard", sep = "\t", row.names = FALSE)
q()
source('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/app - develop - develop.R', echo=TRUE)
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(networkD3)
library(Glimma)
# test limma use
url <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE63310&format=file"
utils::download.file(url, destfile="GSE63310_RAW.tar", mode="wb")
utils::untar("GSE63310_RAW.tar", exdir = ".")
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt", "GSM1545538_purep53.txt",
"GSM1545539_JMS8-2.txt", "GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt", "GSM1545545_JMS9-P8c.txt")
for(i in paste(files, ".gz", sep=""))
R.utils::gunzip(i, overwrite=TRUE)
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
read.delim(files[1], nrow=5)
x <- readDGE(files, columns=c(1,3))
class(x)
dim(x)
head(x)
x
class(x)
x2 <- as.data.frame(x)
x2 <- x@.Data
class(x2)
head(x2)
x2 <- x@.Data[[2]]
class(x2)
head(x2)
counts <- read.delim("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2018-June-RNA-Seq-Workshop/master/thursday/all_counts.txt")
head(counts)
rm(list = ls())
snames <- colnames(counts) # Sample names
snames
cultivar <- substr(snames, 1, nchar(snames) - 2)
time <- substr(snames, nchar(snames) - 1, nchar(snames) - 1)
cultivar
group <- interaction(cultivar)
group
group <- interaction(cultivar, time)
group
counts <- read.delim("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2018-June-RNA-Seq-Workshop/master/thursday/all_counts.txt")
head(counts)
d0 <- DGEList(counts)
d0 <- calcNormFactors(d0)
d0
cutoff <- 1
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
dim(d) # number of genes left
snames <- colnames(counts) # Sample names
snames
cultivar <- substr(snames, 1, nchar(snames) - 2)
time <- substr(snames, nchar(snames) - 1, nchar(snames) - 1)
cultivar
group <- interaction(cultivar, time)
group
group <- interaction(cultivar)
group
d0
d0 <- calcNormFactors(d0, method = "TMM")
d0
x$samples$norm.factors
d0$samples$norm.factors
mm
mm <- model.matrix(~0 + group)
mm
y <- voom(d, mm, plot = T)
tmp <- contrasts.fit(fit, coef = 2) # Directly test second coefficient
contr <- makeContrasts(groupI5.9 - groupI5.6, levels = colnames(coef(fit)))
contr
contr <- makeContrasts(groupI5 - groupI8, levels = colnames(coef(fit)))
contr
runApp()
runApp()
dev.off()
rm(list = ls() )
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tximport)
library(GGally)
library(NOISeq)
library(dplyr)
# load data
mouse_raw <- read.table("./cancer/GSE158502_normalized_Gene_Exp.xlsx")
# load data
mouse_raw <- read.table("./cancer/GSE158502_normalized_Gene_Exp.tsv")
colnames(mouse_raw)
# load data
mouse_raw <- read.table("./cancer/GSE158502_normalized_Gene_Exp.tsv", header = TRUE)
colnames(mouse_raw)
mouse_raw_lung <- mouse_raw[,c("Gene.ID","F3E1122.Control.Epcam","F3E124.Control.Epcam","F3E13.14.Epp.Fat1KO_S19","F3E13.14.Epp.Fat1KO_S23")]
colnames(mouse_raw_squamous) <- c("gene_id","control1","control2","fat1ko1","fat1ko2")
getwd()
head(mouse_raw_squamous)
# load data
mouse_raw <- read.table("./cancer/GSE158502_normalized_Gene_Exp.tsv", header = TRUE)
colnames(mouse_raw)
# select squamous cancer
mouse_raw_squamous <- mouse_raw[,c("Gene.ID","F3E1122.Control.Epcam","F3E124.Control.Epcam","F3E13.14.Epp.Fat1KO_S19","F3E13.14.Epp.Fat1KO_S23")]
colnames(mouse_raw_squamous) <- c("gene_id","skin_cancer1", "skin_cancer2", "fat1ko1", "fat1ko2")
write.csv(mouse_raw_squamous, "./cancer/GSE158502_squamous.csv")
head(mouse_raw_squamous)
write.csv(mouse_raw_squamous, "./cancer/GSE158502_squamous.csv")
# merge with mouse gtf
biotype_mouse <- read.csv("./gff/mouse_gtf_extract.csv")
mouse_raw <- merge(mouse_raw, biotype_mouse[,c("gene_id", "biotype", "length")], by= "gene_id")
which(duplicated(mouse_raw[,1]))
# load data
mouse_raw <- read.table("./cancer/GSE158502_normalized_Gene_Exp.tsv", header = TRUE)
colnames(mouse_raw)[,1] <- "gene_id"
colnames(mouse_raw)[1] <- "gene_id"
# load data
mouse_raw <- read.table("./cancer/GSE158502_normalized_Gene_Exp.tsv", header = TRUE)
colnames(mouse_raw)[1] <- "gene_id"
# merge with mouse gtf
biotype_mouse <- read.csv("./gff/mouse_gtf_extract.csv")
mouse_raw <- merge(mouse_raw, biotype_mouse[,c("gene_id", "biotype", "length")], by= "gene_id")
library(tidyverse)
library(tximport)
library(GGally)
library(NOISeq)
library(dplyr)
biotype_human <- read.csv("./gff/human_gtf_extract.csv", row.names = 1)
biotype_mouse <- read.csv("./gff/mouse_gtf_extract.csv", row.names = 1)
head(biotype_human[biotype_human$biotype == "protein_coding",])
rownames(biotype_human)[1]
table(biotype_human$biotype)
# further processing
# get gene names for human
df_filt <- function(df,thres=5,ncols=2){
# at least ncols columns with minimum thres value
# eg. at least 2 above 5
df_binary <- df >= thres
df_binary_sum <- rowSums(df_binary)
above_thres <- df_binary_sum[df_binary_sum >= ncols]
return(df[names(above_thres), ] )
}
tpm<- function(counts, lengths){
rate <- counts/lengths
tpm <- rate/sum(rate) * 1e6
return (tpm)
}
rownames(mouse_raw) <- mouse_raw$gene_id
aa <- mouse_raw[,-c("gene_id", "biotype", "length")]
colnames(mouse_raw)
# get tpm
mouse_tpm <- apply(mouse_raw[,c(2,3,9,10,15,16,13,14)], MARGIN=1, tpm, mouse_raw$length)
# get tpm
mouse_tpm <- apply(mouse_raw[,c(2,3,9,10,15,16,13,14)], MARGIN=1, function(x) tpm(x,mouse_raw$length))
# get tpm
mouse_tpm <- apply(mouse_raw[,c(2,3,9,10,15,16,13,14)], MARGIN=2, function(x) tpm(x,mouse_raw$length))
max(mouse_tpm)
mouse_tpm$gene_id <- rownames(mouse_tpm)
mouse_tpm$gene_id <- rownames(mouse_tpm)
mouse_squamous <- mouse_tpm[,c("gene_id","F3E1122.Control.Epcam","F3E124.Control.Epcam","F3E13.14.Epp.Fat1KO_S19","F3E13.14.Epp.Fat1KO_S23")]
head(mouse_tpm)
# get tpm
mouse_tpm <- apply(mouse_raw[,c(2,3,9,10,15,16,13,14)], MARGIN=c(1,2), function(x) tpm(x,mouse_raw$length))
# get tpm
mouse_tpm <- apply(mouse_raw[,c(2,3,9,10,15,16,13,14)], MARGIN=2, function(x) tpm(x,mouse_raw$length))
head(mouse_tpm)
mouse_tpm$gene_id <- rownames(mouse_tpm)
head(mouse_tpm)
mouse_tpm <- apply(mouse_raw[,c(2,3,9,10,15,16,13,14)], MARGIN=2, function(x) tpm(x,mouse_raw$length))
mouse_tpm <- as.data.frame(mouse.tpm)
# get tpm
mouse_tpm <- apply(mouse_raw[,c(2,3,9,10,15,16,13,14)], MARGIN=2, function(x) tpm(x,mouse_raw$length))
head(mouse_tpm)
class(mouse_tpm)
dim(mouse_tpm)
mouse_tpm <- as.data.frame(mouse_tpm)
mouse_tpm$gene_id <- rownames(mouse_tpm)
head(mouse_tpm)
# get tpm
mouse_tpm <- apply(mouse_raw[,c(2,3,9,10,15,16,13,14)], MARGIN=2, function(x) tpm(x,mouse_raw$length))
mouse_tpm <- as.data.frame(mouse_tpm)
head(mouse_tpm)
mouse_tpm$biotype <- mouse_raw$biotype
mouse_squamous <- mouse_tpm[,c("F3E1122.Control.Epcam","F3E124.Control.Epcam","F3E13.14.Epp.Fat1KO_S19","F3E13.14.Epp.Fat1KO_S23","biotype")]
colnames(mouse_squamous)[1:4] <- c("skin_cancer1", "skin_cancer2", "fat1ko1", "fat1ko2")
head(mouse_squamous)
write.csv(mouse_squamous, "./cancer/GSE158502_squamous_tpm.csv")
# select lung cancer
mouse_lung <- mouse_tpm[,c("AdCRE.CTRL.3.Epp", "AdCRE.CTRL.4.Epp",
"AdCRE.FAT.KO.1.Epp", "AdCRE.FAT.KO.2.Epp")]
colnames(mouse_lung)[1:4] <- c("lung_cancer1", "lung_cancer2", "fat1ko1", "fat1ko2")
head(mouse_lung)
mouse_lung <- mouse_tpm[,c("AdCRE.CTRL.3.Epp", "AdCRE.CTRL.4.Epp",
"AdCRE.FAT.KO.1.Epp", "AdCRE.FAT.KO.2.Epp", "biotype")]
colnames(mouse_lung)[1:4] <- c("lung_cancer1", "lung_cancer2", "fat1ko1", "fat1ko2")
head(mouse_lung)
write.csv(mouse_lung, "./cancer/GSE158502_lung_tpm.csv")
# filter by tpm value
mouse_squamous_filt <- df_filt(mouse_squamous, thres = 2, ncols = 1)
dim(mouse_squamous_filt)
# filter by tpm value
mouse_squamous_filt <- df_filt(mouse_squamous[,-5], thres = 2, ncols = 1)
dim(mouse_squamous_filt)
# filter by tpm value
mouse_squamous_filt <- df_filt(mouse_squamous[,-5], thres = 2, ncols = 2)
dim(mouse_squamous_filt)
# filter by tpm value
mouse_squamous_filt <- df_filt(mouse_squamous[,-5], thres = 2, ncols = 2)
dim(mouse_squamous_filt)
mouse_squamous_filt <- mouse_squamous[rownames(mouse_squamous_filt),]
write.csv(mouse_squamous_filt,"../data_processed/cancer_mouse_skin_fat1ko.csv")
mouse_lung_filt <- df_filt(mouse_lung[,-5], thres = 2, ncols = 2)
dim(mouse_lung_filt)
mouse_lung_filt <- mouse_lung[rownames(mouse_lung_filt),]
head(mouse_lung_filt)
write.csv(mouse_lung_filt,"../data_processed/cancer_mouse_lung_fat1ko.csv")
q()
