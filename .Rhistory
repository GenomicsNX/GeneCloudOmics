#           plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
#           panel.grid.major = element_blank(), # get rid of major grid
#           panel.grid.minor = element_blank(), # get rid of minor grid
#           legend.background = element_rect(fill = "transparent"), # get rid of legend bg
#           legend.box.background = element_rect(fill = "transparent") ) +
#     guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
#   pca4s_plot
#   ggsave(paste0("./Fig/pp1/F2",letters[i],"s.png"), plot = pca4s_plot, bg = "transparent",
#          height=1, width=1, dpi=300)
}
head(tpm_full)
var(tpm_full[rep1_columns,])
var(t(tpm_full[,rep1_columns]))
var(tpm_full[,rep1_columns])
var(tpm_full[1,rep1_columns])
var(1:10)
tpm_full[1,rep1_columns]
aa <- apply(tpm_full[,rep1_columns], margin = 1, var)
aa <- apply(tpm_full[,rep1_columns], margin = 1, FUN = var)
aa <- apply(tpm_full[,rep1_columns], MARGIN = 1, var)
head(aa)
# run the chunk of getting all genes, ncRNAs, toggle genes replicate, toggle genes condition
# chunk names: get full data, 1a, 1c, 1d
for(i in seq_along(full_time_cell_types)) {
tpm_full <- read.csv(full_time_links[i], row.names = 1)
rep1_columns <- seq(1, ncol(tpm_full)-1, 2); rep2_columns <- seq(2, ncol(tpm_full)-1, 2)
tpm_full <- tpm_full[list_all_genes[[ match_cols2[i] ]], ]
toggle_rep <- toggle_genes_list_rep[[ match_cols2[i] ]]
toggle_cond <- toggle_genes_list_cond[[ match_cols2[i] ]]
all_genes <- rownames(tpm_full)
ncRNAs <- rownames(tpm_full[tpm_full$biotype != "protein_coding", ])
head(toggle_rep)
gene_sets <- c(paste0("Whole transcriptome(", length(all_genes), ")"),
paste0("Minus ncRNAs(", length(setdiff(all_genes, ncRNAs)), ")"),
paste0("Minus toggle replicate(", length(setdiff(all_genes, toggle_rep)), ")"),
paste0("Minus toggle condition(", length(setdiff(all_genes, toggle_cond)), ")"),
paste0("Random ", round(length(all_genes)/10), " genes (10% transcriptome)"),
paste0("Top 5% transcriptome") )
gene_sets <- factor(gene_sets, levels = gene_sets)
colors_traj_named <- colors_traj; names(colors_traj_named) <- gene_sets
# whole genome
traj1_df <- (pcaTemporal(tpm_full[setdiff(all_genes, high_exp_genes[[i]]), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, high_exp_genes[[i]]), rep2_columns])) /2
traj1_df$time <- ttimes[[i]]
traj1_df$gene_set <- gene_sets[[1]]
# remove ncRNA genes
traj2_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep2_columns])) /2
traj2_df$time <- ttimes[[i]]
traj2_df$gene_set <- gene_sets[[2]]
# remove toggle rep
traj3_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep2_columns])) /2
traj3_df$time <- ttimes[[i]]
traj3_df$gene_set <- gene_sets[[3]]
# remove toggle cond
traj4_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep2_columns])) /2
traj4_df$time <- ttimes[[i]]
traj4_df$gene_set <- gene_sets[[4]]
# randomly chosen m genes, m = number of ncRNA genes, loop 100 times and get average
m = floor(length(all_genes)/5)
for(j in 1:100){
rand_genes <- sample(setdiff(all_genes, high_exp_genes[[i]]), m)
traj5_dfi <- (pcaTemporal(tpm_full[rand_genes, rep1_columns]) +
pcaTemporal(tpm_full[rand_genes, rep2_columns])) /2
if(j > 1){
traj5_df_sum <- traj5_df_sum + traj5_dfi
} else {
traj5_df_sum <- traj5_dfi
}
}
traj5_df <- traj5_df_sum/100
traj5_df$time <- ttimes[[i]]
traj5_df$gene_set <- gene_sets[[5]]
# top expressed, n = number of toggle genes, loop 100 times and get average
n = floor(length(all_genes)/5)
aa <- apply(tpm_full[,rep1_columns], MARGIN = 1, var)
aa <- sort(aa, decreasing = TRUE); top_genes <- names(aa[1:n]); rm(aa)
traj6_df <-(pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep2_columns])) /2
traj6_df$time <- ttimes[[i]]
traj6_df$gene_set <- gene_sets[[6]]
# plot together
traj_all <- rbind(traj1_df, traj2_df, traj3_df, traj4_df, traj5_df, traj6_df)
traj_all
pj <- position_jitter(width = 0.02*max(traj_all$PC1), height = 0.02*max(traj_all$PC2))
pca4_plot <- ggplot(traj_all, aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) + #label = time
geom_point(size = 1, position = pj) +
geom_path(position = pj, arrow = arrow(ends = "last"), show.legend = FALSE) +
geom_path(position = pj) +
# geom_text_repel(size = 2) +
scale_color_manual(name = "", values = colors_traj) +
# guides(color = TRUE, linetype = FALSE) +
ggtitle(full_time_cell_types[i]) +
scale_linetype_manual(name = "", values = c(1,1,2,2,2,2) ) +
theme_classic() +
theme(legend.position="bottom",
text = element_text(size=9),
axis.text=element_text(size=9),
axis.title=element_text(size=9), # ,face="bold"
legend.key.height=unit(0,"line"),
legend.key.width=unit(0.8,"line"),
legend.margin=margin(-5,0,0,0),
legend.box.margin=margin(-5,0,0,-30) ) +
guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
pca4_plot
ggsave(paste0("./Fig/pp1/F6",letters[i],".png"), plot = pca4_plot, height=3.8, width=4, dpi=300)
# small window zoom-in
#   pca4s_plot <- ggplot(tail(traj_all, length(rep1_columns)*2),
#                        aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) +
#     geom_point(size = 0.5, position = pj, show.legend = FALSE) +
#     geom_path(position = pj, size = 0.5, arrow = arrow(ends = "last", length = unit(0.1, "native")), show.legend = FALSE) +
#     # geom_text_repel(size = 2) +
#     scale_color_manual(name = "", values = colors_traj[c(5:6)]) +
#     # guides(color = TRUE, linetype = FALSE) +
#     # ggtitle(full_time_cell_types[i]) +
#     scale_linetype_manual(name = "", values = c(2,2) ) +
#     theme_classic() +
#     theme(plot.margin = unit(c(0,0,0,0), "mm"),
#           axis.line = element_line(size = 0.4),
#           axis.ticks = element_line(size = 0.5),
#           # axis.ticks.length = unit(0.5, "native"),
#           text = element_text(size=6),
#           # axis.text=element_text(size=3),
#           axis.title=element_blank(),
#           panel.background = element_rect(fill = "transparent"), # bg of the panel
#           plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
#           panel.grid.major = element_blank(), # get rid of major grid
#           panel.grid.minor = element_blank(), # get rid of minor grid
#           legend.background = element_rect(fill = "transparent"), # get rid of legend bg
#           legend.box.background = element_rect(fill = "transparent") ) +
#     guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
#   pca4s_plot
#   ggsave(paste0("./Fig/pp1/F2",letters[i],"s.png"), plot = pca4s_plot, bg = "transparent",
#          height=1, width=1, dpi=300)
}
traj6_df
rm(list = ls())
rm(list = ls())
rm(list = ls())
q()
knitr::opts_chunk$set(echo = TRUE)
source("utils.R")
library(tidyverse)
library(ggpubr)
library(gridExtra)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
library(ggrepel)
library(grid)
df_filt <- function(df,thres=5,ncols=2){
# at least ncols columns with minimum thres value
# eg. at least 2 above 5
df_binary <- df >= thres
df_binary_sum <- rowSums(df_binary)
above_thres <- df_binary_sum[df_binary_sum >= ncols]
return(df[names(above_thres), ] )
}
tpm<- function(counts, lengths){
rate <- counts/lengths
tpm <- rate/sum(rate) * 1e6
return (tpm)
}
cell_types <- c("Ecoli","B. sublitis","S. cerevisiae","Y.lipolytica",
"Mouse macrophage","Human T-regulatory",
"Human Kaposi sarcoma","Human breast cancer",
"Mouse thyroid proliferative lesion",
"Mouse lung cancer vs Fat1 KO")
cell_types <- factor(cell_types, levels = cell_types)
tpm_full_links <- c("./data/tpm_full/ecoli_tpm.csv",
"./data/tpm_full/GSE141305_Bs3610_biofilm_tpm_full.csv",
"./data/tpm_full/yeast_tpm.csv", #"./data/tpm_full/yeast-YF-tpm.csv", #
"./data/tpm_full/GSE151659_yarrow_tpm.csv",
"./data/tpm_full/GSE160640_mouse_macrophage_tpm.csv",
"./data/tpm_full/GSE94396_iTreg_tpm.csv",
"./data/tpm_full/GSE100684_KS_tpm.csv",
"./data/tpm_full/GSE67240_cancer_human_breast_tpm.csv",
"./data/tpm_full/mouse_proliferative_lession_tpm.csv",
"./data/tpm_full/GSE158502_lung_tpm.csv"
)
processed_links <- c("./data_processed/ecoli_tpm_cutoff_5.csv",
"./data_processed/bacillus_biofilm_tpm.csv",
"./data_processed/yeast_tpm_cutoff_2.csv",
"./data_processed/yarrow_tpm_cutoff2.csv",
"./data_processed/mouse_macrophage_1tpm_GSE160640.csv",
"./data_processed/human_treg_tpm_cutoff_5.csv",
"./data_processed/cancer_human_KS.csv",
"./data_processed/cancer_human_breast.csv",
"./data_processed/mouse_proliferative_lession_tpm.csv",
"./data_processed/cancer_mouse_lung_fat1ko.csv")
deg_links <- c("./data_processed/ecoli_scatlayDE_biotype.csv",
"./data_processed/bacillus_biofilm_tpm_log_10_theta_0.004.csv",
"./data_processed/yeast_scatlayDE_biotype.csv",
"./data_processed/yarrow_tpm_cutoff2_log_10_theta_0.004.csv",
"./data_processed/mouse_macrophage_1tpm_GSE160640_log_10_theta_0.002.csv",
"./data_processed/human_treg_scatlay0.002.csv",
"./data_processed/cancer_human_KS_log_10_theta_0.003.csv",
"./data_processed/cancer_human_breast_log_10_theta_0.005.csv",
"./data_processed/mouse_proliferative_lession_tpm_log_10_theta_0.003.csv",
"./data_processed/cancer_mouse_lung_fat1ko_log_10_theta_0.002.csv")
columns <- list(c("gene_id", "b1", "c1", "b6", "c6", "biotype"),
c("gene_id", "B2", "B3", "B11", "B12", "biotype"),
c("gene_id", "s2_t1",	"s3_t1",	"s2_t8", "s3_t8", "biotype"),
c("gene_id", "A1_rawCount","A2_rawCount","B1_rawCount","B2_rawCount", "biotype"),
c("gene_id", "Mouse1control",	"Mouse2control",	"Mouse1fenoterol4h",	"Mouse2fenoterol4h", "biotype"),
c("gene_id", "G01_T01_A", "G01_T01_D", "G03_T06_A", "G03_T06_D", "biotype"),
c("gene_id", "p32b", "p22b", "p32a", "p22a", "biotype"),
c("gene_id", "S9", "S10", "S13", "S14", "biotype"),
c("gene_id", "control_MUC8788",	"control_MUC8789",	"lesion_MUC8803",	"lesion_MUC8807", "biotype"),
c("X", "lung_cancer1", "lung_cancer2", "fat1ko1", "fat1ko2", "biotype")
)
gff_links <- c("./data/gff/ecoli_gtf_extract.csv",
"./data/gff/bacillus_subtilis_gtf_extract.csv",
"./data/gff/yeast_gtf_extract.csv",
"./data/gff/yarrow_gtf_extract.csv",
"./data/gff/mouse_gtf_extract.csv",
"./data/gff/human_gtf_extract.csv",
"./data/gff/human_gtf_extract.csv",
"./data/gff/human_gtf_extract.csv",
"./data/gff/mouse_gtf_extract.csv",
"./data/gff/mouse_gtf_extract.csv" )
# get all genes after removing all-zeros rows
list_all_genes <- vector(mode = "list", length = length(cell_types))
for(i in seq_along(cell_types)){
tpmi <- read.csv(tpm_full_links[i])
colnames(tpmi)[1] <- "gene_id"
rownames(tpmi) <- tpmi[,1]
# remove all zeros rows
tpmi_num <- tpmi %>% select_if(is.numeric)
tpmi_num_filt <- tpmi_num
if(cell_types[i] != "S. cerevisiae"){
# tpmi_num_filt <- df_filt(tpmi_num, thres = 1, ncols = 2)
tpmi_num_filt <- tpmi_num[apply(tpmi_num, 1, function(x) !all(x==0)),]
}
tpmi_filt <- tpmi[rownames(tpmi) %in% rownames(tpmi_num_filt), ]
list_all_genes[[i]] <- tpmi_filt$gene_id
}
# set up place holder dataframe to count biotypes of all genes, DE genes, toggle replicate, toggle condition
# all_biotypes <- unique(read.csv("biotype_grouped.csv")[,3]) # loaded in utils.R
shape_df <- data.frame(matrix(ncol = length(cell_types), nrow = length(all_biotypes)+1 ))
colnames(shape_df) <- cell_types
rownames(shape_df) <- c(moveme(all_biotypes, "protein_coding first"), "all_non_coding")
biotype_count_all <- shape_df
biotype_count_de <- shape_df
biotype_count_toggle_rep <- shape_df
biotype_count_toggle_cond <- shape_df
# testing
i=1
tpmi <- read.csv(tpm_full_links[i])
colnames(tpmi)[1] <- "gene_id"
rownames(tpmi) <- tpmi[,1]
aa <- countBiotype(tpmi)
aa
# USE YEAST tpm_full_link: "./data/tpm_full/yeast_tpm.csv"
tpm_full_links[3] <- "./data/tpm_full/yeast_tpm.csv"
# only remove all-zero rows
n_ncRNA <- vector(mode = "numeric", length = length(cell_types))
n_genome <- vector(mode = "numeric", length = length(cell_types))
for(i in seq_along(cell_types)){
tpmi <- read.csv(tpm_full_links[i])
colnames(tpmi)[1] <- "gene_id"
rownames(tpmi) <- tpmi[,1]
# remove all zeros rows
tpmi_num <- tpmi %>% select_if(is.numeric)
tpmi_num_filt <- tpmi_num
if(cell_types[i] != "S. cerevisiae"){
# tpmi_num_filt <- df_filt(tpmi_num, thres = 1, ncols = 2)
tpmi_num_filt <- tpmi_num[apply(tpmi_num, 1, function(x) !all(x==0)),]
}
tpmi_filt <- tpmi[rownames(tpmi) %in% rownames(tpmi_num_filt), ]
# count number of ncRNA
biotypesi <- tpmi_filt$biotype
n_ncRNA[i] <- sum(biotypesi != "protein_coding" )
n_genome[i] <- nrow(tpmi_filt)
# count number of each biotypes
biotype_count_all[,i] <- countBiotype(tpmi_filt)$count
}
n_ncRNA
n_genome
n_ncRNA/n_genome
biotype_count_all
ncRNA_percentage_df <- data.frame("ncRNA_percent" = 100*n_ncRNA/n_genome,
"cell_type" = cell_types)
ncRNA_percentage_df
p1a <- ggplot(ncRNA_percentage_df, aes(x=cell_type, y = ncRNA_percent))+
geom_bar(stat="identity") + ggtitle("ncRNA percentage in whole transcriptome") +
theme_bw(base_size = 8) + lims(y = c(0, 60)) +
xlab("Cell type") + ylab("ncRNA percentage") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# p1a
# ggsave("./Fig/pp1/F1a.png", plot = p1a, height=4.5, width=4, dpi=300)
# write biotype_count_all to clipboard, copy to TableS1_biotype_number
# write.table(biotype_count_all, "clipboard", sep = "\t", row.names = TRUE)
biotype_count_all
cor(biotype_count_all)
biotype_count_all
class(biotype_count_all[,1])
class(biotype_count_all[,2])
biotype_count_all
countBiotype(tpmi_filt)
class(countBiotype(tpmi_filt)$count)
# USE YEAST tpm_full_link: "./data/tpm_full/yeast_tpm.csv"
tpm_full_links[3] <- "./data/tpm_full/yeast_tpm.csv"
# only remove all-zero rows
n_ncRNA <- vector(mode = "numeric", length = length(cell_types))
n_genome <- vector(mode = "numeric", length = length(cell_types))
for(i in seq_along(cell_types)){
tpmi <- read.csv(tpm_full_links[i])
colnames(tpmi)[1] <- "gene_id"
rownames(tpmi) <- tpmi[,1]
# remove all zeros rows
tpmi_num <- tpmi %>% select_if(is.numeric)
tpmi_num_filt <- tpmi_num
if(cell_types[i] != "S. cerevisiae"){
# tpmi_num_filt <- df_filt(tpmi_num, thres = 1, ncols = 2)
tpmi_num_filt <- tpmi_num[apply(tpmi_num, 1, function(x) !all(x==0)),]
}
tpmi_filt <- tpmi[rownames(tpmi) %in% rownames(tpmi_num_filt), ]
# count number of ncRNA
biotypesi <- tpmi_filt$biotype
n_ncRNA[i] <- sum(biotypesi != "protein_coding" )
n_genome[i] <- nrow(tpmi_filt)
# count number of each biotypes
biotype_count_all[,i] <- as.numeric(countBiotype(tpmi_filt)$count)
}
n_ncRNA
n_genome
n_ncRNA/n_genome
biotype_count_all
ncRNA_percentage_df <- data.frame("ncRNA_percent" = 100*n_ncRNA/n_genome,
"cell_type" = cell_types)
ncRNA_percentage_df
p1a <- ggplot(ncRNA_percentage_df, aes(x=cell_type, y = ncRNA_percent))+
geom_bar(stat="identity") + ggtitle("ncRNA percentage in whole transcriptome") +
theme_bw(base_size = 8) + lims(y = c(0, 60)) +
xlab("Cell type") + ylab("ncRNA percentage") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# p1a
# ggsave("./Fig/pp1/F1a.png", plot = p1a, height=4.5, width=4, dpi=300)
# write biotype_count_all to clipboard, copy to TableS1_biotype_number
# write.table(biotype_count_all, "clipboard", sep = "\t", row.names = TRUE)
biotype_count_all
biotype_count_all
cor(biotype_count_all)
0.999^2
cor(biotype_count_all[-nrow(biotype_count_all),])
cor(biotype_count_all[-nrow(biotype_count_all),], "spearman")
cor(biotype_count_all[-nrow(biotype_count_all),], "Spearman")
cor(biotype_count_all[-nrow(biotype_count_all),], method = "spearman")
clusters <- Hmist::varclust(biotype_count_all, similarity="pearson")
install.packages("Hmist")
clusters <- Hmisc::varclust(biotype_count_all, similarity="pearson")
clusters <- Hmisc::varclus(biotype_count_all, similarity="pearson")
lapply(biotype_count_all, is.numeric)
as.matrix(biotype_count_all)
clusters <- Hmisc::varclus(as.matrix(biotype_count_all), similarity="pearson")
clusters
library("sfsmisc")
mydata_for_clustering=biotype_count_all
n = nrow(mydata_for_clustering)
nclus = 2
myclus = kmeans(mydata_for_clustering,centers=nclus)
print(names(myclus))
clusters
print(names(myclus))
totwss = kclus$tot.withinss
totwss = myclus$tot.withinss
rsq = 1-(totwss*(n-1))/(totwss[1]*(n-seq(1,kmax)))
totwss
lm1 <- lm(biotype_count_all$Ecoli, biotype_count_all[,2] + biotype_count_all[,3] + biotype_count_all[,4])
lm1 <- lm(biotype_count_all$Ecoli ~ biotype_count_all[,2] + biotype_count_all[,3] + biotype_count_all[,4])
summary(lm1)
x <- biotype_count_all[-nrow(biotype_count_all), ]
x <- biotype_count_all[-nrow(biotype_count_all), ]
lm1 <- lm(x[,1] ~ x[,2] + x[,3] + x[,4])
summary(lm1)
x <- biotype_count_all[-nrow(biotype_count_all), ]
x <- lapply(x, MARGIN = 1, function(t) (t-mean(t))/sd(t) )
x <- apply(x, MARGIN = 1, function(t) (t-mean(t))/sd(t) )
x <- biotype_count_all[-nrow(biotype_count_all), ]
x <- apply(x, MARGIN = 1, function(t) (t-mean(t))/sd(t) )
lm1 <- lm(x[,1] ~ x[,2] + x[,3] + x[,4])
summary(lm1)
x <- biotype_count_all #[-nrow(biotype_count_all), ]
x <- apply(x, MARGIN = 1, function(t) (t-mean(t))/sd(t) )
lm1 <- lm(x[,1] ~ x[,2] + x[,3] + x[,4])
summary(lm1)
lm1 <- lm(x[,1] ~ x[,1] + x[,2] + x[,3] + x[,4])
summary(lm1)
x
x <- biotype_count_all #[-nrow(biotype_count_all), ]
x <- apply(x, MARGIN = 2, function(t) (t-mean(t))/sd(t) )
lm1 <- lm(x[,1] ~ x[,1] + x[,2] + x[,3] + x[,4])
summary(lm1)
x <- biotype_count_all #[-nrow(biotype_count_all), ]
x <- apply(x, MARGIN = 1, function(t) (t-mean(t))/sd(t) )
lm1 <- lm(x[,4] ~ x[,2] + x[,3] + x[,1])
summary(lm1)
biotype_count_all
cor(biotype_count_all[-nrow(biotype_count_all),], method = "spearman")
clusters <- Hmisc::varclus(as.matrix(biotype_count_all), similarity="spearman")
clusters
rm(list = ls())
shiny::runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans')
scale(1:10)
scale(cbind(1:10, 21:30))
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans')
getwd()
wd <- dirname(rstudioapi::getActiveDocumentContext()$path) # set wd as the current folder
print(wd == getwd())
print(wd)
print(getwd())
if (!wd == getwd()) {
setwd(wd)
}
wd <- dirname(rstudioapi::getActiveDocumentContext()$path) # set wd as the current folder
print(wd == getwd())
print(wd)
print(getwd())
if (!wd == getwd()) {
setwd(wd)
}
getwd()
SD <- read.csv(load.files())
SD <- read.csv("./Test data/Yeast-hypoxia/yeast_nm.csv", row.names = 1)
DS <- SD; rm(SD)
DS[1:6, 1:6]
DS[apply(DS <= 5, 1, sum) <= 80, ]
DS <- DS[apply(DS <= 5, 1, sum) <= 80, ]
dim(DS)
aa <- apply(DS, 1, scale)
aa[1:6, 1:6]
dim(aa)
aa <- t(aa)
tsne_val <- Rtsne(t(aa),
dims = 2,
initial_dims = 4,
perplexity = 15,
theta = 0.0)
)
tsne_val <- Rtsne(t(aa),
dims = 2,
initial_dims = 4,
perplexity = 15,
theta = 0.0 )
tsne_val
# create the data frame for plotting
tsne_df <- data.frame(
TSNE1 = tsne_val$Y[, 1],
TSNE2 = tsne_val$Y[, 2],
Sample = colnames(tsne2.data)
)
# plotting
p <- plot_ly(data = tsne_df, x = ~TSNE1, y = ~TSNE2, text = ~Sample,
mode = 'markers', opacity = 0.5 )
tsne_val
tsne2.data <- DS
tsne_df <- data.frame(
TSNE1 = tsne_val$Y[, 1],
TSNE2 = tsne_val$Y[, 2],
Sample = colnames(tsne2.data)
)
# plotting
p <- plot_ly(data = tsne_df, x = ~TSNE1, y = ~TSNE2, text = ~Sample,
mode = 'markers', opacity = 0.5 )
p
colnames(aa)
rownames(aa)
colnames(aa)
p <- plot_ly(data = tsne_df, x = ~TSNE1, y = ~TSNE2, text = ~Sample) %>%
add_trace(type = "scatter", mode = 'markers', opacity = 0.5)
p
tsne2.data <- t(apply(log10(DS+1), MARGIN = 1, scale))
colnames(tsne2.data) <- colnames(DS)
no_of_pca = 6
perplexity_value = 15
tsne_val <- Rtsne(t(tsne2.data),
dims = 2,
initial_dims = no_of_pca,
perplexity = perplexity_value,
theta = 0.0)
# create the data frame for plotting
tsne_df <- data.frame(
TSNE1 = tsne_val$Y[, 1],
TSNE2 = tsne_val$Y[, 2],
Sample = colnames(tsne2.data)
)
# plotting
p <- plot_ly(data = tsne_df, x = ~TSNE1, y = ~TSNE2, text = ~Sample) %>%
add_trace(type = "scatter", mode = 'markers', opacity = 0.5)
p
tsne2.data <- log10(DS+1)
tsne_val <- Rtsne(t(tsne2.data),
dims = 2,
initial_dims = no_of_pca,
perplexity = perplexity_value,
theta = 0.0)
# create the data frame for plotting
tsne_df <- data.frame(
TSNE1 = tsne_val$Y[, 1],
TSNE2 = tsne_val$Y[, 2],
Sample = colnames(tsne2.data)
)
# plotting
p <- plot_ly(data = tsne_df, x = ~TSNE1, y = ~TSNE2, text = ~Sample) %>%
add_trace(type = "scatter", mode = 'markers', opacity = 0.5)
p
q()
