traj1_df$time <- ttimes[[i]]
traj1_df$gene_set <- gene_sets[[1]]
# remove ncRNA genes
traj2_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep2_columns])) /2
traj2_df$time <- ttimes[[i]]
traj2_df$gene_set <- gene_sets[[2]]
# remove toggle rep
traj3_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep2_columns])) /2
traj3_df$time <- ttimes[[i]]
traj3_df$gene_set <- gene_sets[[3]]
# remove toggle cond
traj4_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep2_columns])) /2
traj4_df$time <- ttimes[[i]]
traj4_df$gene_set <- gene_sets[[4]]
# randomly chosen m genes, m = number of ncRNA genes, loop 100 times and get average
m = floor(length(all_genes)/5)
for(j in 1:100){
rand_genes <- sample(setdiff(all_genes, high_exp_genes[[i]]), m)
traj5_dfi <- (pcaTemporal(tpm_full[rand_genes, rep1_columns]) +
pcaTemporal(tpm_full[rand_genes, rep2_columns])) /2
if(j > 1){
traj5_df_sum <- traj5_df_sum + traj5_dfi
} else {
traj5_df_sum <- traj5_dfi
}
}
traj5_df <- traj5_df_sum/100
traj5_df$time <- ttimes[[i]]
traj5_df$gene_set <- gene_sets[[5]]
# top expressed, n = number of toggle genes, loop 100 times and get average
n = floor(length(all_genes)/5)
aa <- aa[order(aa[,1]),]; top_genes <- rownames(tail(aa, n)); rm(aa)
traj6_df <-(pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep2_columns])) /2
traj6_df$time <- ttimes[[i]]
traj6_df$gene_set <- gene_sets[[4]]
# plot together
traj_all <- rbind(traj1_df, traj2_df, traj3_df, traj4_df, traj5_df, traj6_df)
traj_all
pj <- position_jitter(width = 0.02*max(traj_all$PC1), height = 0.02*max(traj_all$PC2))
pca4_plot <- ggplot(traj_all, aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) + #label = time
geom_point(size = 1, position = pj) +
geom_path(position = pj, arrow = arrow(ends = "last"), show.legend = FALSE) +
geom_path(position = pj) +
# geom_text_repel(size = 2) +
scale_color_manual(name = "", values = colors_traj) +
# guides(color = TRUE, linetype = FALSE) +
ggtitle(full_time_cell_types[i]) +
scale_linetype_manual(name = "", values = c(1,1,2,2,2,2) ) +
theme_classic() +
theme(legend.position="bottom",
text = element_text(size=9),
axis.text=element_text(size=9),
axis.title=element_text(size=9), # ,face="bold"
legend.key.height=unit(0,"line"),
legend.key.width=unit(0.8,"line"),
legend.margin=margin(-5,0,0,0),
legend.box.margin=margin(-5,0,0,-30) ) +
guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
pca4_plot
ggsave(paste0("./Fig/pp1/F6",letters[i],".png"), plot = pca4_plot, height=3.8, width=4, dpi=300)
# small window zoom-in
#   pca4s_plot <- ggplot(tail(traj_all, length(rep1_columns)*2),
#                        aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) +
#     geom_point(size = 0.5, position = pj, show.legend = FALSE) +
#     geom_path(position = pj, size = 0.5, arrow = arrow(ends = "last", length = unit(0.1, "native")), show.legend = FALSE) +
#     # geom_text_repel(size = 2) +
#     scale_color_manual(name = "", values = colors_traj[c(5:6)]) +
#     # guides(color = TRUE, linetype = FALSE) +
#     # ggtitle(full_time_cell_types[i]) +
#     scale_linetype_manual(name = "", values = c(2,2) ) +
#     theme_classic() +
#     theme(plot.margin = unit(c(0,0,0,0), "mm"),
#           axis.line = element_line(size = 0.4),
#           axis.ticks = element_line(size = 0.5),
#           # axis.ticks.length = unit(0.5, "native"),
#           text = element_text(size=6),
#           # axis.text=element_text(size=3),
#           axis.title=element_blank(),
#           panel.background = element_rect(fill = "transparent"), # bg of the panel
#           plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
#           panel.grid.major = element_blank(), # get rid of major grid
#           panel.grid.minor = element_blank(), # get rid of minor grid
#           legend.background = element_rect(fill = "transparent"), # get rid of legend bg
#           legend.box.background = element_rect(fill = "transparent") ) +
#     guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
#   pca4s_plot
#   ggsave(paste0("./Fig/pp1/F2",letters[i],"s.png"), plot = pca4s_plot, bg = "transparent",
#          height=1, width=1, dpi=300)
}
# run the chunk of getting all genes, ncRNAs, toggle genes replicate, toggle genes condition
# chunk names: get full data, 1a, 1c, 1d
for(i in seq_along(full_time_cell_types)) {
tpm_full <- read.csv(full_time_links[i], row.names = 1)
rep1_columns <- seq(1, ncol(tpm_full)-1, 2); rep2_columns <- seq(2, ncol(tpm_full)-1, 2)
tpm_full <- tpm_full[list_all_genes[[ match_cols2[i] ]], ]
toggle_rep <- toggle_genes_list_rep[[ match_cols2[i] ]]
toggle_cond <- toggle_genes_list_cond[[ match_cols2[i] ]]
all_genes <- rownames(tpm_full)
ncRNAs <- rownames(tpm_full[tpm_full$biotype != "protein_coding", ])
head(toggle_rep)
gene_sets <- c(paste0("Whole transcriptome(", length(all_genes), ")"),
paste0("Minus ncRNAs(", length(setdiff(all_genes, ncRNAs)), ")"),
paste0("Minus toggle replicate(", length(setdiff(all_genes, toggle_rep)), ")"),
paste0("Minus toggle condition(", length(setdiff(all_genes, toggle_cond)), ")"),
paste0("Random ", round(length(all_genes)/10), " genes (10% transcriptome)"),
paste0("Top 5% transcriptome") )
gene_sets <- factor(gene_sets, levels = gene_sets)
colors_traj_named <- colors_traj; names(colors_traj_named) <- gene_sets
# whole genome
traj1_df <- (pcaTemporal(tpm_full[setdiff(all_genes, high_exp_genes[[i]]), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, high_exp_genes[[i]]), rep2_columns])) /2
traj1_df$time <- ttimes[[i]]
traj1_df$gene_set <- gene_sets[[1]]
# remove ncRNA genes
traj2_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep2_columns])) /2
traj2_df$time <- ttimes[[i]]
traj2_df$gene_set <- gene_sets[[2]]
# remove toggle rep
traj3_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep2_columns])) /2
traj3_df$time <- ttimes[[i]]
traj3_df$gene_set <- gene_sets[[3]]
# remove toggle cond
traj4_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep2_columns])) /2
traj4_df$time <- ttimes[[i]]
traj4_df$gene_set <- gene_sets[[4]]
# randomly chosen m genes, m = number of ncRNA genes, loop 100 times and get average
m = floor(length(all_genes)/5)
for(j in 1:100){
rand_genes <- sample(setdiff(all_genes, high_exp_genes[[i]]), m)
traj5_dfi <- (pcaTemporal(tpm_full[rand_genes, rep1_columns]) +
pcaTemporal(tpm_full[rand_genes, rep2_columns])) /2
if(j > 1){
traj5_df_sum <- traj5_df_sum + traj5_dfi
} else {
traj5_df_sum <- traj5_dfi
}
}
traj5_df <- traj5_df_sum/100
traj5_df$time <- ttimes[[i]]
traj5_df$gene_set <- gene_sets[[5]]
# top expressed, n = number of toggle genes, loop 100 times and get average
n = floor(length(all_genes)/5)
aa <- tpm_full[order(tpm_full[,1]),]; top_genes <- rownames(tail(aa, n)); rm(aa)
traj6_df <-(pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep2_columns])) /2
traj6_df$time <- ttimes[[i]]
traj6_df$gene_set <- gene_sets[[4]]
# plot together
traj_all <- rbind(traj1_df, traj2_df, traj3_df, traj4_df, traj5_df, traj6_df)
traj_all
pj <- position_jitter(width = 0.02*max(traj_all$PC1), height = 0.02*max(traj_all$PC2))
pca4_plot <- ggplot(traj_all, aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) + #label = time
geom_point(size = 1, position = pj) +
geom_path(position = pj, arrow = arrow(ends = "last"), show.legend = FALSE) +
geom_path(position = pj) +
# geom_text_repel(size = 2) +
scale_color_manual(name = "", values = colors_traj) +
# guides(color = TRUE, linetype = FALSE) +
ggtitle(full_time_cell_types[i]) +
scale_linetype_manual(name = "", values = c(1,1,2,2,2,2) ) +
theme_classic() +
theme(legend.position="bottom",
text = element_text(size=9),
axis.text=element_text(size=9),
axis.title=element_text(size=9), # ,face="bold"
legend.key.height=unit(0,"line"),
legend.key.width=unit(0.8,"line"),
legend.margin=margin(-5,0,0,0),
legend.box.margin=margin(-5,0,0,-30) ) +
guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
pca4_plot
ggsave(paste0("./Fig/pp1/F6",letters[i],".png"), plot = pca4_plot, height=3.8, width=4, dpi=300)
# small window zoom-in
#   pca4s_plot <- ggplot(tail(traj_all, length(rep1_columns)*2),
#                        aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) +
#     geom_point(size = 0.5, position = pj, show.legend = FALSE) +
#     geom_path(position = pj, size = 0.5, arrow = arrow(ends = "last", length = unit(0.1, "native")), show.legend = FALSE) +
#     # geom_text_repel(size = 2) +
#     scale_color_manual(name = "", values = colors_traj[c(5:6)]) +
#     # guides(color = TRUE, linetype = FALSE) +
#     # ggtitle(full_time_cell_types[i]) +
#     scale_linetype_manual(name = "", values = c(2,2) ) +
#     theme_classic() +
#     theme(plot.margin = unit(c(0,0,0,0), "mm"),
#           axis.line = element_line(size = 0.4),
#           axis.ticks = element_line(size = 0.5),
#           # axis.ticks.length = unit(0.5, "native"),
#           text = element_text(size=6),
#           # axis.text=element_text(size=3),
#           axis.title=element_blank(),
#           panel.background = element_rect(fill = "transparent"), # bg of the panel
#           plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
#           panel.grid.major = element_blank(), # get rid of major grid
#           panel.grid.minor = element_blank(), # get rid of minor grid
#           legend.background = element_rect(fill = "transparent"), # get rid of legend bg
#           legend.box.background = element_rect(fill = "transparent") ) +
#     guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
#   pca4s_plot
#   ggsave(paste0("./Fig/pp1/F2",letters[i],"s.png"), plot = pca4s_plot, bg = "transparent",
#          height=1, width=1, dpi=300)
}
traj6_df
# run the chunk of getting all genes, ncRNAs, toggle genes replicate, toggle genes condition
# chunk names: get full data, 1a, 1c, 1d
for(i in seq_along(full_time_cell_types)) {
tpm_full <- read.csv(full_time_links[i], row.names = 1)
rep1_columns <- seq(1, ncol(tpm_full)-1, 2); rep2_columns <- seq(2, ncol(tpm_full)-1, 2)
tpm_full <- tpm_full[list_all_genes[[ match_cols2[i] ]], ]
toggle_rep <- toggle_genes_list_rep[[ match_cols2[i] ]]
toggle_cond <- toggle_genes_list_cond[[ match_cols2[i] ]]
all_genes <- rownames(tpm_full)
ncRNAs <- rownames(tpm_full[tpm_full$biotype != "protein_coding", ])
head(toggle_rep)
gene_sets <- c(paste0("Whole transcriptome(", length(all_genes), ")"),
paste0("Minus ncRNAs(", length(setdiff(all_genes, ncRNAs)), ")"),
paste0("Minus toggle replicate(", length(setdiff(all_genes, toggle_rep)), ")"),
paste0("Minus toggle condition(", length(setdiff(all_genes, toggle_cond)), ")"),
paste0("Random ", round(length(all_genes)/10), " genes (10% transcriptome)"),
paste0("Top 5% transcriptome") )
gene_sets <- factor(gene_sets, levels = gene_sets)
colors_traj_named <- colors_traj; names(colors_traj_named) <- gene_sets
# whole genome
traj1_df <- (pcaTemporal(tpm_full[setdiff(all_genes, high_exp_genes[[i]]), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, high_exp_genes[[i]]), rep2_columns])) /2
traj1_df$time <- ttimes[[i]]
traj1_df$gene_set <- gene_sets[[1]]
# remove ncRNA genes
traj2_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep2_columns])) /2
traj2_df$time <- ttimes[[i]]
traj2_df$gene_set <- gene_sets[[2]]
# remove toggle rep
traj3_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep2_columns])) /2
traj3_df$time <- ttimes[[i]]
traj3_df$gene_set <- gene_sets[[3]]
# remove toggle cond
traj4_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep2_columns])) /2
traj4_df$time <- ttimes[[i]]
traj4_df$gene_set <- gene_sets[[4]]
# randomly chosen m genes, m = number of ncRNA genes, loop 100 times and get average
m = floor(length(all_genes)/5)
for(j in 1:100){
rand_genes <- sample(setdiff(all_genes, high_exp_genes[[i]]), m)
traj5_dfi <- (pcaTemporal(tpm_full[rand_genes, rep1_columns]) +
pcaTemporal(tpm_full[rand_genes, rep2_columns])) /2
if(j > 1){
traj5_df_sum <- traj5_df_sum + traj5_dfi
} else {
traj5_df_sum <- traj5_dfi
}
}
traj5_df <- traj5_df_sum/100
traj5_df$time <- ttimes[[i]]
traj5_df$gene_set <- gene_sets[[5]]
# top expressed, n = number of toggle genes, loop 100 times and get average
n = floor(length(all_genes)/5)
aa <- tpm_full[order(tpm_full[,1]),]; top_genes <- rownames(tail(aa, n)); rm(aa)
traj6_df <-(pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep2_columns])) /2
traj6_df$time <- ttimes[[i]]
traj6_df$gene_set <- gene_sets[[6]]
# plot together
traj_all <- rbind(traj1_df, traj2_df, traj3_df, traj4_df, traj5_df, traj6_df)
traj_all
pj <- position_jitter(width = 0.02*max(traj_all$PC1), height = 0.02*max(traj_all$PC2))
pca4_plot <- ggplot(traj_all, aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) + #label = time
geom_point(size = 1, position = pj) +
geom_path(position = pj, arrow = arrow(ends = "last"), show.legend = FALSE) +
geom_path(position = pj) +
# geom_text_repel(size = 2) +
scale_color_manual(name = "", values = colors_traj) +
# guides(color = TRUE, linetype = FALSE) +
ggtitle(full_time_cell_types[i]) +
scale_linetype_manual(name = "", values = c(1,1,2,2,2,2) ) +
theme_classic() +
theme(legend.position="bottom",
text = element_text(size=9),
axis.text=element_text(size=9),
axis.title=element_text(size=9), # ,face="bold"
legend.key.height=unit(0,"line"),
legend.key.width=unit(0.8,"line"),
legend.margin=margin(-5,0,0,0),
legend.box.margin=margin(-5,0,0,-30) ) +
guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
pca4_plot
ggsave(paste0("./Fig/pp1/F6",letters[i],".png"), plot = pca4_plot, height=3.8, width=4, dpi=300)
# small window zoom-in
#   pca4s_plot <- ggplot(tail(traj_all, length(rep1_columns)*2),
#                        aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) +
#     geom_point(size = 0.5, position = pj, show.legend = FALSE) +
#     geom_path(position = pj, size = 0.5, arrow = arrow(ends = "last", length = unit(0.1, "native")), show.legend = FALSE) +
#     # geom_text_repel(size = 2) +
#     scale_color_manual(name = "", values = colors_traj[c(5:6)]) +
#     # guides(color = TRUE, linetype = FALSE) +
#     # ggtitle(full_time_cell_types[i]) +
#     scale_linetype_manual(name = "", values = c(2,2) ) +
#     theme_classic() +
#     theme(plot.margin = unit(c(0,0,0,0), "mm"),
#           axis.line = element_line(size = 0.4),
#           axis.ticks = element_line(size = 0.5),
#           # axis.ticks.length = unit(0.5, "native"),
#           text = element_text(size=6),
#           # axis.text=element_text(size=3),
#           axis.title=element_blank(),
#           panel.background = element_rect(fill = "transparent"), # bg of the panel
#           plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
#           panel.grid.major = element_blank(), # get rid of major grid
#           panel.grid.minor = element_blank(), # get rid of minor grid
#           legend.background = element_rect(fill = "transparent"), # get rid of legend bg
#           legend.box.background = element_rect(fill = "transparent") ) +
#     guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
#   pca4s_plot
#   ggsave(paste0("./Fig/pp1/F2",letters[i],"s.png"), plot = pca4s_plot, bg = "transparent",
#          height=1, width=1, dpi=300)
}
head(tpm_full)
var(tpm_full[rep1_columns,])
var(t(tpm_full[,rep1_columns]))
var(tpm_full[,rep1_columns])
var(tpm_full[1,rep1_columns])
var(1:10)
tpm_full[1,rep1_columns]
aa <- apply(tpm_full[,rep1_columns], margin = 1, var)
aa <- apply(tpm_full[,rep1_columns], margin = 1, FUN = var)
aa <- apply(tpm_full[,rep1_columns], MARGIN = 1, var)
head(aa)
# run the chunk of getting all genes, ncRNAs, toggle genes replicate, toggle genes condition
# chunk names: get full data, 1a, 1c, 1d
for(i in seq_along(full_time_cell_types)) {
tpm_full <- read.csv(full_time_links[i], row.names = 1)
rep1_columns <- seq(1, ncol(tpm_full)-1, 2); rep2_columns <- seq(2, ncol(tpm_full)-1, 2)
tpm_full <- tpm_full[list_all_genes[[ match_cols2[i] ]], ]
toggle_rep <- toggle_genes_list_rep[[ match_cols2[i] ]]
toggle_cond <- toggle_genes_list_cond[[ match_cols2[i] ]]
all_genes <- rownames(tpm_full)
ncRNAs <- rownames(tpm_full[tpm_full$biotype != "protein_coding", ])
head(toggle_rep)
gene_sets <- c(paste0("Whole transcriptome(", length(all_genes), ")"),
paste0("Minus ncRNAs(", length(setdiff(all_genes, ncRNAs)), ")"),
paste0("Minus toggle replicate(", length(setdiff(all_genes, toggle_rep)), ")"),
paste0("Minus toggle condition(", length(setdiff(all_genes, toggle_cond)), ")"),
paste0("Random ", round(length(all_genes)/10), " genes (10% transcriptome)"),
paste0("Top 5% transcriptome") )
gene_sets <- factor(gene_sets, levels = gene_sets)
colors_traj_named <- colors_traj; names(colors_traj_named) <- gene_sets
# whole genome
traj1_df <- (pcaTemporal(tpm_full[setdiff(all_genes, high_exp_genes[[i]]), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, high_exp_genes[[i]]), rep2_columns])) /2
traj1_df$time <- ttimes[[i]]
traj1_df$gene_set <- gene_sets[[1]]
# remove ncRNA genes
traj2_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], ncRNAs)), rep2_columns])) /2
traj2_df$time <- ttimes[[i]]
traj2_df$gene_set <- gene_sets[[2]]
# remove toggle rep
traj3_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_rep)), rep2_columns])) /2
traj3_df$time <- ttimes[[i]]
traj3_df$gene_set <- gene_sets[[3]]
# remove toggle cond
traj4_df <- (pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], toggle_cond)), rep2_columns])) /2
traj4_df$time <- ttimes[[i]]
traj4_df$gene_set <- gene_sets[[4]]
# randomly chosen m genes, m = number of ncRNA genes, loop 100 times and get average
m = floor(length(all_genes)/5)
for(j in 1:100){
rand_genes <- sample(setdiff(all_genes, high_exp_genes[[i]]), m)
traj5_dfi <- (pcaTemporal(tpm_full[rand_genes, rep1_columns]) +
pcaTemporal(tpm_full[rand_genes, rep2_columns])) /2
if(j > 1){
traj5_df_sum <- traj5_df_sum + traj5_dfi
} else {
traj5_df_sum <- traj5_dfi
}
}
traj5_df <- traj5_df_sum/100
traj5_df$time <- ttimes[[i]]
traj5_df$gene_set <- gene_sets[[5]]
# top expressed, n = number of toggle genes, loop 100 times and get average
n = floor(length(all_genes)/5)
aa <- apply(tpm_full[,rep1_columns], MARGIN = 1, var)
aa <- sort(aa, decreasing = TRUE); top_genes <- names(aa[1:n]); rm(aa)
traj6_df <-(pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep1_columns]) +
pcaTemporal(tpm_full[setdiff(all_genes, c(high_exp_genes[[i]], top_genes)), rep2_columns])) /2
traj6_df$time <- ttimes[[i]]
traj6_df$gene_set <- gene_sets[[6]]
# plot together
traj_all <- rbind(traj1_df, traj2_df, traj3_df, traj4_df, traj5_df, traj6_df)
traj_all
pj <- position_jitter(width = 0.02*max(traj_all$PC1), height = 0.02*max(traj_all$PC2))
pca4_plot <- ggplot(traj_all, aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) + #label = time
geom_point(size = 1, position = pj) +
geom_path(position = pj, arrow = arrow(ends = "last"), show.legend = FALSE) +
geom_path(position = pj) +
# geom_text_repel(size = 2) +
scale_color_manual(name = "", values = colors_traj) +
# guides(color = TRUE, linetype = FALSE) +
ggtitle(full_time_cell_types[i]) +
scale_linetype_manual(name = "", values = c(1,1,2,2,2,2) ) +
theme_classic() +
theme(legend.position="bottom",
text = element_text(size=9),
axis.text=element_text(size=9),
axis.title=element_text(size=9), # ,face="bold"
legend.key.height=unit(0,"line"),
legend.key.width=unit(0.8,"line"),
legend.margin=margin(-5,0,0,0),
legend.box.margin=margin(-5,0,0,-30) ) +
guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
pca4_plot
ggsave(paste0("./Fig/pp1/F6",letters[i],".png"), plot = pca4_plot, height=3.8, width=4, dpi=300)
# small window zoom-in
#   pca4s_plot <- ggplot(tail(traj_all, length(rep1_columns)*2),
#                        aes(x = PC1, y = PC2, col = gene_set, linetype = gene_set) ) +
#     geom_point(size = 0.5, position = pj, show.legend = FALSE) +
#     geom_path(position = pj, size = 0.5, arrow = arrow(ends = "last", length = unit(0.1, "native")), show.legend = FALSE) +
#     # geom_text_repel(size = 2) +
#     scale_color_manual(name = "", values = colors_traj[c(5:6)]) +
#     # guides(color = TRUE, linetype = FALSE) +
#     # ggtitle(full_time_cell_types[i]) +
#     scale_linetype_manual(name = "", values = c(2,2) ) +
#     theme_classic() +
#     theme(plot.margin = unit(c(0,0,0,0), "mm"),
#           axis.line = element_line(size = 0.4),
#           axis.ticks = element_line(size = 0.5),
#           # axis.ticks.length = unit(0.5, "native"),
#           text = element_text(size=6),
#           # axis.text=element_text(size=3),
#           axis.title=element_blank(),
#           panel.background = element_rect(fill = "transparent"), # bg of the panel
#           plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
#           panel.grid.major = element_blank(), # get rid of major grid
#           panel.grid.minor = element_blank(), # get rid of minor grid
#           legend.background = element_rect(fill = "transparent"), # get rid of legend bg
#           legend.box.background = element_rect(fill = "transparent") ) +
#     guides(col=guide_legend(nrow=3, byrow=TRUE, override.aes = list(arrow = NULL) ))
#   pca4s_plot
#   ggsave(paste0("./Fig/pp1/F2",letters[i],"s.png"), plot = pca4s_plot, bg = "transparent",
#          height=1, width=1, dpi=300)
}
traj6_df
rm(list = ls())
rm(list = ls())
rm(list = ls())
q()
shiny::runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans')
DS
getwd()
setwd("C:\\Users\\BUITT\\Dropbox\\Biotrans\\ABioTrans")
DS <- read.csv("./Test data/Yeast-hypoxia")
DS <- read.csv("./Test data/Yeast-hypoxia/yeast_nm.csv")
DS <- read.csv("./Test data/Yeast-hypoxia/yeast_nm.csv", row.names)
DS <- read.csv("./Test data/Yeast-hypoxia/yeast_nm.csv", row.names = 1)
tsne2.data <- log10(DS+1)
perplexity_value <- 10
no_of_pca = 6
tsne_val <- Rtsne(t(tsne2.data),
dims = 2,
initial_dims = no_of_pca,
perplexity = perplexity_value,
theta = 0.0)
tsne_df <- data.frame(
TSNE1 = tsne_val$Y[, 1],
TSNE2 = tsne_val$Y[, 2],
Sample = colnames(tsne2.data)
)
num <- 6
kmeans.result <- kmeans(tsne_df[,1:2], num)
kmeans.result
tsne_cluster_num <- as.numeric(input$tsne_cluster_num)
tsne_kmeans_result <- kmeans(tsne_df[,1:2], tsne_cluster_num)
tsne_cluster_num <- num
tsne_cluster_num <- as.numeric(input$tsne_cluster_num)
tsne_kmeans_result <- kmeans(tsne_df[,1:2], tsne_cluster_num)
tsne_kmeans_result <- kmeans(tsne_df[,1:2], tsne_cluster_num)
dim(tsne_df)
# plotting
p <- plot_ly(data = tsne_df, x = ~TSNE1, y = ~TSNE2, text = ~Sample, color = ~cluster ) %>%
add_trace(type = "scatter", mode = 'markers', opacity = 0.5)
p
tsne_df$cluster <- tsne_kmeans_result
# plotting
p <- plot_ly(data = tsne_df, x = ~TSNE1, y = ~TSNE2, text = ~Sample, color = ~cluster ) %>%
add_trace(type = "scatter", mode = 'markers', opacity = 0.5)
p
tsne_kmeans_result$cluster
tsne_df$cluster <- tsne_kmeans_result$cluster
p <- plot_ly(data = tsne_df, x = ~TSNE1, y = ~TSNE2, text = ~Sample, color = ~cluster ) %>%
add_trace(type = "scatter", mode = 'markers', opacity = 0.5)
p
tsne_df$cluster <- factor(tsne_kmeans_result$cluster, levels = 1:max(tsne_kmeans_result$cluster) )
p <- plot_ly(data = tsne_df, x = ~TSNE1, y = ~TSNE2, text = ~Sample, color = ~cluster ) %>%
add_trace(type = "scatter", mode = 'markers', opacity = 0.5)
p
p <- plot_ly(data = tsne_df, x = ~TSNE1, y = ~TSNE2, text = ~Sample, color = ~cluster ) %>%
add_trace(type = "scatter", mode = 'markers', opacity = 0.5)
p
runApp()
q()
