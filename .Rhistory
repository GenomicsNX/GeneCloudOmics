percents <- lengths/nrow(mouse_df)
png("./Fig/toggle_dev/F15a_n_toggle.png", width = 4, height = 3, res = 300, unit = "in")
par(cex = 0.5, mar = c(6,3,2,1), mgp = c(1.5,0.7,0) )
barplot(lengths,las=2, main = "Number of toggle genes each stages")
#cex.names = 0.65, cex.lab   = 0.65, cex.main = 0.5
dev.off()
png("./Fig/toggle_dev/F15b_percent_toggle.png", width = 4, height = 3, res = 300, unit = "in")
par(cex = 0.5, mar = c(6,3,2,1), mgp = c(1.5,0.7,0) )
barplot(percents,las=2, main = "Number of toggle genes each stages")
#cex.names = 0.65, cex.lab   = 0.65, cex.main = 0.5
dev.off()
png("./Fig/toggle_dev/F15b_percent_toggle.png", width = 4, height = 3, res = 300, unit = "in")
par(cex = 0.5, mar = c(6,3,2,1), mgp = c(1.5,0.7,0) )
barplot(percents,las=2, main = "Percentage of toggle genes each stages")
#cex.names = 0.65, cex.lab   = 0.65, cex.main = 0.5
dev.off()
### 6 scatter for each biotype
toggle_de_prol <- toggleGene(tpm_df_prol[rownames(tpm_df_prol) %in% scatlay_prol, ])
table(tpm_df_prol[toggle_de_prol, "biotype"])
# scatter of non-toggle DE genes
att1 <- scatterBiotype2(tpm_df_prol[rownames(tpm_df_prol) %in% setdiff(scatlay_prol, toggle_de_prol), ],
cell_type = "mouse proliferative lesion thyroid")
p_scatter1 <- ggarrange(plotlist = att1[[1]],
ncol=2, nrow = ceiling(length(att1[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter1
file_name1 <- paste0("./Fig/multi_attractor/F12a_cancer_mouse_prol_scatter_replicate.png")
ggsave(file_name1, plot =  p_scatter1, height=2*ceiling(length(att1[[1]])/2), width=4, dpi=300)
# scatter of toggle
att2 <- scatterBiotype2(tpm_df_prol[rownames(tpm_df_prol) %in% toggle_de_prol, ],
cell_type = "mouse proliferative lesion thyroid")
p_scatter2 <- ggarrange(plotlist = att2[[1]],
ncol=2, nrow = ceiling(length(att2[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter2
file_name2 <- paste0("./Fig/multi_attractor/F12b_DEtoggle_cancer_mouse_prol_scatter_replicate.png")
ggsave(file_name2, plot =  p_scatter2, height=2*ceiling(length(att2[[1]])/2), width=4, dpi=300)
### 6 scatter for each biotype
toggle_de_breast <- toggleGene(tpm_df_breast[rownames(tpm_df_breast) %in% scatlay_breast, ])
table(tpm_df_breast[toggle_de_breast, "biotype"])
# scatter of non-toggle DE genes
att1 <- scatterBiotype2(tpm_df_breast[rownames(tpm_df_breast) %in% setdiff(scatlay_breast, toggle_de_breast), ],
cell_type = "human breast cancer")
p_scatter1 <- ggarrange(plotlist = att1[[1]],
ncol=2, nrow = ceiling(length(att1[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter1
file_name1 <- paste0("./Fig/multi_attractor/F12a_breast_scatter_replicate.png")
ggsave(file_name1, plot =  p_scatter1, height=2*ceiling(length(att1[[1]])/2), width=4, dpi=300)
# scatter of toggle
att2 <- scatterBiotype2(tpm_df_breast[rownames(tpm_df_breast) %in% toggle_de_breast, ],
cell_type = "human breast cancer")
p_scatter2 <- ggarrange(plotlist = att2[[1]],
ncol=2, nrow = ceiling(length(att2[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter2
file_name2 <- paste0("./Fig/multi_attractor/F12b_DEtoggle_breast_scatter_replicate.png")
ggsave(file_name2, plot =  p_scatter2, height=2*ceiling(length(att2[[1]])/2), width=4, dpi=300)
### 6 scatter for each biotype
toggle_de_ks <- toggleGene(tpm_df_ks[rownames(tpm_df_ks) %in% scatlay_ks, ])
table(tpm_df_ks[toggle_de_ks, "biotype"])
# scatter of non-toggle DE genes
att1 <- scatterBiotype2(tpm_df_ks[rownames(tpm_df_ks) %in% setdiff(scatlay_ks, toggle_de_ks), ],
cell_type = "human sarcoma")
p_scatter1 <- ggarrange(plotlist = att1[[1]],
ncol=2, nrow = ceiling(length(att1[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter1
file_name1 <- paste0("./Fig/multi_attractor/F12a_ks_scatter_replicate.png")
ggsave(file_name1, plot =  p_scatter1, height=2*ceiling(length(att1[[1]])/2), width=4, dpi=300)
# scatter of toggle
att2 <- scatterBiotype2(tpm_df_ks[rownames(tpm_df_ks) %in% toggle_de_ks, ],
cell_type = "human sarcoma")
p_scatter2 <- ggarrange(plotlist = att2[[1]],
ncol=2, nrow = ceiling(length(att2[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter2
file_name2 <- paste0("./Fig/multi_attractor/F12b_DEtoggle_ks_scatter_replicate.png")
ggsave(file_name2, plot =  p_scatter2, height=2*ceiling(length(att2[[1]])/2), width=4, dpi=300)
### 6 scatter for each biotype
toggle_de_human <- toggleGene(tpm_df_human[rownames(tpm_df_human) %in% scatlay_human, ])
table(tpm_df_human[toggle_de_human, "biotype"])
# scatter of non-toggle DE genes
att1 <- scatterBiotype2(tpm_df_human[rownames(tpm_df_human) %in% setdiff(scatlay_human, toggle_de_human), ],
cell_type = "human Treg")
p_scatter1 <- ggarrange(plotlist = att1[[1]],
ncol=2, nrow = ceiling(length(att1[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter1
file_name1 <- paste0("./Fig/multi_attractor/F12a_human_scatter_replicate.png")
ggsave(file_name1, plot =  p_scatter1, height=2*ceiling(length(att1[[1]])/2), width=4, dpi=300)
# scatter of toggle
att2 <- scatterBiotype2(tpm_df_human[rownames(tpm_df_human) %in% toggle_de_human, ],
cell_type = "human Treg")
p_scatter2 <- ggarrange(plotlist = att2[[1]],
ncol=2, nrow = ceiling(length(att2[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter2
file_name2 <- paste0("./Fig/multi_attractor/F12b_DEtoggle_human_scatter_replicate.png")
ggsave(file_name2, plot =  p_scatter2, height=2*ceiling(length(att2[[1]])/2), width=4, dpi=300)
### 6 scatter for each biotype
toggle_de_mouse <- toggleGene(tpm_df_mouse[rownames(tpm_df_mouse) %in% scatlay_mouse, ])
table(tpm_df_mouse[toggle_de_mouse, "biotype"])
# scatter of non-toggle DE genes
att1 <- scatterBiotype2(tpm_df_mouse[rownames(tpm_df_mouse) %in% setdiff(scatlay_mouse, toggle_de_mouse), ],
cell_type = "mouse macr")
p_scatter1 <- ggarrange(plotlist = att1[[1]],
ncol=2, nrow = ceiling(length(att1[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter1
file_name1 <- paste0("./Fig/multi_attractor/F12a_mouse_scatter_replicate.png")
ggsave(file_name1, plot =  p_scatter1, height=2*ceiling(length(att1[[1]])/2), width=4, dpi=300)
# scatter of toggle
att2 <- scatterBiotype2(tpm_df_mouse[rownames(tpm_df_mouse) %in% toggle_de_mouse, ],
cell_type = "mouse macr")
p_scatter2 <- ggarrange(plotlist = att2[[1]],
ncol=2, nrow = ceiling(length(att2[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter2
file_name2 <- paste0("./Fig/multi_attractor/F12b_DEtoggle_mouse_scatter_replicate.png")
ggsave(file_name2, plot =  p_scatter2, height=2*ceiling(length(att2[[1]])/2), width=4, dpi=300)
### 6 scatter for each biotype
toggle_de_yarrow <- toggleGene(tpm_df_yarrow[rownames(tpm_df_yarrow) %in% scatlay_yarrow, ])
table(tpm_df_yarrow[toggle_de_yarrow, "biotype"])
# scatter of non-toggle DE genes
att1 <- scatterBiotype2(tpm_df_yarrow[rownames(tpm_df_yarrow) %in% setdiff(scatlay_yarrow, toggle_de_yarrow), ],
cell_type = "yarrow")
p_scatter1 <- ggarrange(plotlist = att1[[1]],
ncol=2, nrow = ceiling(length(att1[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter1
file_name1 <- paste0("./Fig/multi_attractor/F12a_yarrow_scatter_replicate.png")
ggsave(file_name1, plot =  p_scatter1, height=2*ceiling(length(att1[[1]])/2), width=4, dpi=300)
# scatter of toggle
att2 <- scatterBiotype2(tpm_df_yarrow[rownames(tpm_df_yarrow) %in% toggle_de_yarrow, ],
cell_type = "yarrow")
p_scatter2 <- ggarrange(plotlist = att2[[1]],
ncol=2, nrow = ceiling(length(att2[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter2
file_name2 <- paste0("./Fig/multi_attractor/F12b_DEtoggle_yarrow_scatter_replicate.png")
ggsave(file_name2, plot =  p_scatter2, height=2*ceiling(length(att2[[1]])/2), width=4, dpi=300)
### 6 scatter for each biotype
toggle_de_yeast <- toggleGene(tpm_df_yeast[rownames(tpm_df_yeast) %in% scatlay_yeast, ])
table(tpm_df_yeast[toggle_de_yeast, "biotype"])
# scatter of non-toggle DE genes
att1 <- scatterBiotype2(tpm_df_yeast[rownames(tpm_df_yeast) %in% setdiff(scatlay_yeast, toggle_de_yeast), ],
cell_type = "yeast")
p_scatter1 <- ggarrange(plotlist = att1[[1]],
ncol=2, nrow = ceiling(length(att1[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter1
file_name1 <- paste0("./Fig/multi_attractor/F12a_yeast_scatter_replicate.png")
ggsave(file_name1, plot =  p_scatter1, height=2*ceiling(length(att1[[1]])/2), width=4, dpi=300)
# scatter of toggle
att2 <- scatterBiotype2(tpm_df_yeast[rownames(tpm_df_yeast) %in% toggle_de_yeast, ],
cell_type = "yeast")
p_scatter2 <- ggarrange(plotlist = att2[[1]],
ncol=2, nrow = ceiling(length(att2[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter2
file_name2 <- paste0("./Fig/multi_attractor/F12b_DEtoggle_yeast_scatter_replicate.png")
ggsave(file_name2, plot =  p_scatter2, height=2*ceiling(length(att2[[1]])/2), width=4, dpi=300)
### 6 scatter for each biotype
toggle_de_ecoli <- toggleGene(tpm_df_ecoli[rownames(tpm_df_ecoli) %in% scatlay_ecoli, ])
table(tpm_df_ecoli[toggle_de_ecoli, "biotype"])
# scatter of non-toggle DE genes
att1 <- scatterBiotype2(tpm_df_ecoli[rownames(tpm_df_ecoli) %in% setdiff(scatlay_ecoli, toggle_de_ecoli), ],
cell_type = "ecoli")
p_scatter1 <- ggarrange(plotlist = att1[[1]],
ncol=2, nrow = ceiling(length(att1[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter1
file_name1 <- paste0("./Fig/multi_attractor/F12a_ecoli_scatter_replicate.png")
ggsave(file_name1, plot =  p_scatter1, height=2*ceiling(length(att1[[1]])/2), width=4, dpi=300)
# scatter of toggle
att2 <- scatterBiotype2(tpm_df_ecoli[rownames(tpm_df_ecoli) %in% toggle_de_ecoli, ],
cell_type = "ecoli")
p_scatter2 <- ggarrange(plotlist = att2[[1]],
ncol=2, nrow = ceiling(length(att2[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter2
file_name2 <- paste0("./Fig/multi_attractor/F12b_DEtoggle_ecoli_scatter_replicate.png")
ggsave(file_name2, plot =  p_scatter2, height=2*ceiling(length(att2[[1]])/2), width=4, dpi=300)
### 6 scatter for each biotype
toggle_de_bacillus <- toggleGene(tpm_df_bacillus[rownames(tpm_df_bacillus) %in% scatlay_bacillus, ])
table(tpm_df_bacillus[toggle_de_bacillus, "biotype"])
# scatter of non-toggle DE genes
att1 <- scatterBiotype2(tpm_df_bacillus[rownames(tpm_df_bacillus) %in% setdiff(scatlay_bacillus, toggle_de_bacillus), ],
cell_type = "bacillus")
p_scatter1 <- ggarrange(plotlist = att1[[1]],
ncol=2, nrow = ceiling(length(att1[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter1
file_name1 <- paste0("./Fig/multi_attractor/F12a_bacillus_scatter_replicate.png")
ggsave(file_name1, plot =  p_scatter1, height=2*ceiling(length(att1[[1]])/2), width=4, dpi=300)
# scatter of toggle
att2 <- scatterBiotype2(tpm_df_bacillus[rownames(tpm_df_bacillus) %in% toggle_de_bacillus, ],
cell_type = "bacillus")
p_scatter2 <- ggarrange(plotlist = att2[[1]],
ncol=2, nrow = ceiling(length(att2[[1]])/2),
common.legend = FALSE, legend = c(0.8, 0.95)) #, legend = "top"
p_scatter2
file_name2 <- paste0("./Fig/multi_attractor/F12b_DEtoggle_bacillus_scatter_replicate.png")
ggsave(file_name2, plot =  p_scatter2, height=2*ceiling(length(att2[[1]])/2), width=4, dpi=300)
q()
knitr::opts_chunk$set(echo = TRUE)
# helper function in utils.R file
source("utils.R")
library(tidyverse)
library(ggpubr)
library(gridExtra)
## test
# aa <- corBiotype1(tpm.df, de_scatlay, cell_type = "mouse_macr")
# aa[[1]]
# aa[[2]]
# de_merged <- tpm.df[rownames(tpm.df)%in% de_scatlay, ]
# aa2 <- corBiotype2(tpm.df[rownames(tpm.df)%in% de_scatlay, ], cell_type = "mouse_macr")
# aa2
# get data tpm cutoff
tpm_df_prol <- read.csv("./data_processed/mouse_proliferative_lession_tpm.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_prol)
# get scatlay genes, merge with biotype for each gene
scatlay_prol <- read.csv("./data_processed/mouse_proliferative_lession_tpm_log_10_theta_0.003.csv")$common
scatlay_prol <- scatlay_prol[scatlay_prol != ""]
### 3
# density and scatter plot by non-de genes
pp_list_prol <- scatterBiotype(tpm_df_prol[rownames(tpm_df_prol) %in% scatlay_prol, ],
cell_type = "mouse proliferative thyroid", mode = 1)
pp_list_prol[[1]]
pp_list_prol[[2]]
ggsave("./Fig/F3c_dist_biotype_cancer_mouse_thyroid.png", plot =  ggarrange(pp_list_prol[[2]], legend = "right"),
height=2.4, width=4, dpi=300)
knitr::opts_chunk$set(echo = TRUE)
# helper function in utils.R file
source("utils.R")
library(tidyverse)
library(ggpubr)
library(gridExtra)
## test
# aa <- corBiotype1(tpm.df, de_scatlay, cell_type = "mouse_macr")
# aa[[1]]
# aa[[2]]
# de_merged <- tpm.df[rownames(tpm.df)%in% de_scatlay, ]
# aa2 <- corBiotype2(tpm.df[rownames(tpm.df)%in% de_scatlay, ], cell_type = "mouse_macr")
# aa2
# helper function in utils.R file
source("utils.R")
library(tidyverse)
library(ggpubr)
library(gridExtra)
## test
# aa <- corBiotype1(tpm.df, de_scatlay, cell_type = "mouse_macr")
# aa[[1]]
# aa[[2]]
# de_merged <- tpm.df[rownames(tpm.df)%in% de_scatlay, ]
# aa2 <- corBiotype2(tpm.df[rownames(tpm.df)%in% de_scatlay, ], cell_type = "mouse_macr")
# aa2
# get data tpm cutoff
tpm_df_bacillus <- read.csv("./data_processed/bacillus_tpm_cutoff2.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_bacillus)
# get scatlay genes, merge with biotype for each gene
scatlay_bacillus <- read.csv("./data_processed/bacillus_tpm_cutoff2_log_10_theta_0.006.csv")$common
### 2 cor of each type of biotype
cor_biotype2_bacillus <- corBiotype2(tpm_df_bacillus[rownames(tpm_df_bacillus) %in% scatlay_bacillus, ], cell_type = "bacillus")
## get correlation by biotypes:
corBiotype2 <- function(de_merged, cell_type, btw_mode = "condition", ...){
# get correlation for each biotype, within DE genes.
if(! any(colnames(de_merged) %in% "biotype")){
warning("No biotype found, check input dataframe")
return (null);
}
if(!any(colnames(de_merged) %in% "gene_id") ){
de_merged$gene_id <- rownames(de_merged)
# de_merged <- de_merged[,-which(colnames(de_merged) == "gene_id")]
}
de_merged <- de_merged[moveme(names(de_merged), "gene_id first")] # move gene_id to first column
# grouping the biotypes
de_merged <- left_join(de_merged, biotype_grouped[,c("biotype","biotype_grouped2")], by = "biotype")
de_merged <- de_merged[,-which(colnames(de_merged) == "biotype")]
colnames(de_merged)[which(colnames(de_merged) == "biotype_grouped2")] <- "biotype"
# getting the biotypes
biotypes <- unique(de_merged$biotype)
column_name <- c("biotype", "cor", "mean_exp", "mean_FC" ,"n_genes")
# get between condition or between replicate
cor_positions <- NULL
if(btw_mode == "condition"){
cor_positions <- c(3,4,7,8)
}
else if(btw_mode == "replicate") {
cor_positions <- c(2, 15)
}
if(is.null(cor_positions) ){
warning("btw_mode must be 'condition' or 'replicate' ")
return (null);
}
# getting cor
out_df <- data.frame(matrix(vector(), length(biotypes)+1, length(column_name),
dimnames=list(c(), column_name )),
stringsAsFactors=F)
out_df[1,] <- c("All_DE", mean(cor(de_merged[, 2:5], ...)[cor_positions]),
median(sapply(de_merged[, 2:5], mean)),
nrow(de_merged))
# get fold change
tpm_avg <- data.frame("gene_id" = de_merged$gene_id,
"avg1" = (de_merged[,2] + de_merged[,3])/2,
"avg2" = (de_merged[,4] + de_merged[,5])/2,
"biotype" = de_merged$biotype  )
fcs <- apply(tpm_avg[,2:3], MARGIN = 1, function(x) max(x)/(min(x)+0.001) )
tpm_avg$FC <- fcs
for(i in seq_along(biotypes)){
cor_i <- mean(cor(de_merged[de_merged$biotype == biotypes[i], 2:5], ...)[cor_positions])
n_genes_i <- nrow(de_merged[de_merged$biotype == biotypes[i], 2:5])
mean_exp_i <- median(sapply(de_merged[de_merged$biotype == biotypes[i], 2:5], mean))
mean_fc_i <- mean(tpm_avg[tpm_avg$biotype == biotypes[i], "FC"])
out_df[i+1, "biotype"] <- biotypes[i]
out_df[i+1, "cor"] <- cor_i
out_df[i+1, "mean_exp"] <- mean_exp_i
out_df[i+1, "mean_FC"] <- mean_fc_i
out_df[i+1, "n_genes"] <- n_genes_i
}
out_df$cell_type <- cell_type
return(out_df)
}
### 2 cor of each type of biotype
cor_biotype2_bacillus <- corBiotype2(tpm_df_bacillus[rownames(tpm_df_bacillus) %in% scatlay_bacillus, ], cell_type = "bacillus")
de_merged <- tpm_df_bacillus[rownames(tpm_df_bacillus) %in% scatlay_bacillus, ]
cell_type = "bacillus"
btw_mode = "condition"
# getting the biotypes
biotypes <- unique(de_merged$biotype)
column_name <- c("biotype", "cor", "mean_exp", "mean_FC" ,"n_genes")
cor_positions <- c(3,4,7,8)
# helper function in utils.R file
source("utils.R")
library(tidyverse)
library(ggpubr)
library(gridExtra)
## test
# aa <- corBiotype1(tpm.df, de_scatlay, cell_type = "mouse_macr")
# aa[[1]]
# aa[[2]]
# de_merged <- tpm.df[rownames(tpm.df)%in% de_scatlay, ]
# aa2 <- corBiotype2(tpm.df[rownames(tpm.df)%in% de_scatlay, ], cell_type = "mouse_macr")
# aa2
### 2 cor of each type of biotype
cor_biotype2_bacillus <- corBiotype2(tpm_df_bacillus[rownames(tpm_df_bacillus) %in% scatlay_bacillus, ], cell_type = "bacillus")
write.table(cor_biotype2_bacillus, "clipboard", sep = "\t", row.names = FALSE)
# get data tpm cutoff
tpm_df_ecoli <- read.csv("./data_processed/ecoli_tpm_cutoff_5.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_ecoli)
# get scatlay genes, merge with biotype for each gene
scatlay_ecoli <- read.csv("./data_processed/ecoli_scatlayDE_biotype.csv")$gene_id
### 2 cor of each type of biotype
cor_biotype2_ecoli <- corBiotype2(tpm_df_ecoli[rownames(tpm_df_ecoli) %in% scatlay_ecoli, ], cell_type = "ecoli")
write.table(cor_biotype2_ecoli, "clipboard", sep = "\t", row.names = FALSE)
# get data tpm cutoff
tpm_df_yeast <- read.csv("./data_processed/yeast_tpm_cutoff_2.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_yeast)
# get scatlay genes, merge with biotype for each gene
scatlay_yeast <- read.csv("./data_processed/yeast_scatlayDE_biotype.csv")$gene_id
### 2 cor of each type of biotype
cor_biotype2_yeast <- corBiotype2(tpm_df_yeast[rownames(tpm_df_yeast) %in% scatlay_yeast, ],
cell_type = "yeast", method = "pearson")
cor_biotype2_yeast
write.table(cor_biotype2_yeast, "clipboard", sep = "\t", row.names = FALSE)
# get data tpm cutoff
tpm_df_yarrow <- read.csv("./data_processed/yarrow_tpm_cutoff2.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_yarrow)
# get scatlay genes, merge with biotype for each gene
scatlay_yarrow <- read.csv("./data_processed/yarrow_tpm_cutoff2_log_10_theta_0.004.csv")$common
### 1
### 2 cor of each type of biotype
cor_biotype2_yarrow <- corBiotype2(tpm_df_yarrow[rownames(tpm_df_yarrow) %in% scatlay_yarrow, ],
cell_type = "yarrow", method = "spearman")
cor_biotype2_yarrow
write.table(cor_biotype2_yarrow, "clipboard", sep = "\t", row.names = FALSE)
# get data tpm cutoff
tpm_df_mouse <- read.csv("./data_processed/mouse_macrophage_1tpm_GSE160640.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_mouse)
# get scatlay genes, merge with biotype for each gene
scatlay_mouse <- read.csv("./data_processed/mouse_macrophage_1tpm_GSE160640_log_10_theta_0.002.csv")$common
### 1
### 2 cor of each type of biotype
cor_biotype2_mouse <- corBiotype2(tpm_df_mouse[rownames(tpm_df_mouse) %in% scatlay_mouse, ],
cell_type = "mouse")
cor_biotype2_mouse
write.table(cor_biotype2_mouse, "clipboard", sep = "\t", row.names = FALSE)
# get data tpm cutoff
tpm_df_human <- read.csv("./data_processed/human_treg_tpm_cutoff_5.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_human)
# get scatlay genes, merge with biotype for each gene
scatlay_human <- read.csv("./data_processed/human_treg_scatlay0.002.csv")$scatlay
### 2 cor of each type of biotype
cor_biotype2_human <- corBiotype2(tpm_df_human[rownames(tpm_df_human) %in% scatlay_human, ],
cell_type = "human")
write.table(cor_biotype2_human, "clipboard", sep = "\t", row.names = FALSE)
# get data tpm cutoff
tpm_df_ks <- read.csv("./data_processed/cancer_human_KS.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_ks)
# get scatlay genes, merge with biotype for each gene
scatlay_ks <- read.csv("./data_processed/cancer_human_KS_log_10_theta_0.003.csv")$common
scatlay_ks <- scatlay_ks[scatlay_ks != ""]
### 2 cor of each type of biotype
cor_biotype2_ks <- corBiotype2(tpm_df_ks[rownames(tpm_df_ks) %in% scatlay_ks, ],
cell_type = "human sarcoma")
write.table(cor_biotype2_ks, "clipboard", sep = "\t", row.names = FALSE)
# get data tpm cutoff
tpm_df_breast <- read.csv("./data_processed/cancer_human_breast.csv", row.names = 1)
head(tpm_df_breast)
cor(tpm_df_breast[,1:4])
tpm_df_breast_log <- tpm_df_breast
tpm_df_breast_log[,1:4] <- log10(tpm_df_breast[1:4] + 1)
cor_biotype2_breast <- corBiotype2(tpm_df_breast[rownames(tpm_df_breast) %in% scatlay_breast, ],
cell_type = "human breast cancer")
# get scatlay genes, merge with biotype for each gene
scatlay_breast <- read.csv("./data_processed/cancer_human_breast_log_10_theta_0.005.csv")$common
scatlay_breast <- scatlay_breast[scatlay_breast != ""]
cor_biotype2_breast <- corBiotype2(tpm_df_breast[rownames(tpm_df_breast) %in% scatlay_breast, ],
cell_type = "human breast cancer")
cor_biotype2_breast
write.table(cor_biotype2_breast, "clipboard", sep = "\t", row.names = FALSE)
tpm_df_prol <- read.csv("./data_processed/mouse_proliferative_lession_tpm.csv", row.names = 1)
# remove the highest expression
# tpm_df_bacillus <- tpm_df_bacillus[-which(rownames(tpm_df_bacillus) == "BC_4879"), ]
head(tpm_df_prol)
# get scatlay genes, merge with biotype for each gene
scatlay_prol <- read.csv("./data_processed/mouse_proliferative_lession_tpm_log_10_theta_0.003.csv")$common
scatlay_prol <- scatlay_prol[scatlay_prol != ""]
### 2 cor of each type of biotype
cor_biotype2_prol <- corBiotype2(tpm_df_prol[rownames(tpm_df_prol) %in% scatlay_prol, ],
cell_type = "mouse proliferative thyroid")
write.table(cor_biotype2_prol, "clipboard", sep = ";", row.names = FALSE)
cor_biotype2_prol <- corBiotype2(tpm_df_prol[rownames(tpm_df_prol) %in% scatlay_prol, ],
cell_type = "mouse proliferative thyroid")
write.table(cor_biotype2_prol, "clipboard", sep = "\t", row.names = FALSE)
q()
source('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/app - develop - develop.R', echo=TRUE)
source('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/app - develop - develop.R', echo=TRUE)
source('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/app - develop - develop.R', echo=TRUE)
source('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/app - develop - develop.R', echo=TRUE)
source('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/app - develop - develop.R', echo=TRUE)
source('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/app - develop - develop.R', echo=TRUE)
source('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/app - develop - develop.R', echo=TRUE)
library(bubbles)
library(networkD3)
if (length(find.package(package = "networkD3", quiet = T)) > 0) {
library(networkD3)
} else {
install.packages("networkD3")
library(networkD3)
}
if (length(find.package(package = "bubbles", quiet = T)) > 0) {
library(bubbles)
} else {
install.packages("bubbles")
library(bubbles)
}
if (length(find.package(package = "bubbles", quiet = T)) > 0) {
library(bubbles)
} else {
devtools::install_github("jcheng5/bubbles")
library(bubbles)
}
devtools::install_github("jcheng5/bubbles")
devtools::install_github("jcheng5/bubbles")
devtools::install_github("jcheng5/bubbles")
getwd()
devtools::install_github("jcheng5/bubbles")
install.packages("rlang")
devtools::install_github("jcheng5/bubbles")
Sys.getenv('PATH')
aa <- Sys.getenv('PATH')
strsplit(aa, ";")
find_rtools(T)
library(devtools)
find_rtools(T)
find_rtools(T)
Sys.getenv('BINPREF')
library("devtools")
install_local("C:\\Users\\BUITT\\Downloads\\bubbles-master.zip")
SessionInfo()
find_rtools()
install.packages("C:\\Users\\BUITT\\Downloads\\bubbles-master.zip", repos=NULL)
library(bubbles)
if (length(find.package(package = "bubbles", quiet = T)) > 0) {
library(bubbles)
} else {
devtools::install_github("jcheng5/bubbles")
library(bubbles)
}
source('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/app - develop - develop.R', echo=TRUE)
utils::sessionInfo()
remove.packages("bubbles-master")
remove.packages("bubbles-master")
q()
