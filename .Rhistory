col = colorRamp2(c(min(nCounts_de), median(nCounts_de), max(nCounts_de)), c("red", "black", "green")), clustering_method_rows = "ward.D",
top_annotation_height = unit(4, "mm"), cluster_rows = T,cluster_columns = F,
width=unit(6,"cm"),show_row_names = FALSE, show_column_names = T,row_dend_reorder = FALSE)
Heatmap(nCounts_de, name = "expression", clustering_distance_rows = "pearson",
col = colorRamp2(c(min(nCounts_de), median(nCounts_de), max(nCounts_de)), c("red", "black", "green")), clustering_method_rows = "ward.D",
top_annotation_height = unit(4, "mm"), cluster_rows = T,cluster_columns = F,
width=unit(6,"cm"),show_row_names = FALSE, show_column_names = T,row_dend_reorder = T)
pheatmap(nCounts_de, col = colorRamp2(c(min(nCounts_de), median(nCounts_de), max(nCounts_de)), c("red", "black", "green")), mar = c(10,2))
pheatmap(nCounts_de, col = hmcol, mar = c(10,2))
heatmap(nCounts_de, col = hmcol, mar = c(10,2))
pheatmap(nCounts_de[,1:6], col = hmcol, mar = c(10,2))
pheatmap(nCounts_de[,1:6], col = hmcol, mar = c(10,2), cluster_cols=F,clustering_distance_rows = "pearson")
pheatmap(nCounts_de[,1:6], col = hmcol, mar = c(10,2), cluster_cols=F,clustering_distance_rows = "correlation")
pheatmap(nCounts_de[,1:6], col = hmcol, mar = c(10,2), cluster_cols=F,clustering_distance_rows = "correlation", show_rownames = F)
Heatmap(nCounts_de, name = "expression", clustering_distance_rows = "pearson",
col = colorRamp2(c(min(nCounts_de), median(nCounts_de), max(nCounts_de)), c("red", "black", "green")), clustering_method_rows = "ward.D",
top_annotation_height = unit(4, "mm"), cluster_rows = T,cluster_columns = F,
width=unit(6,"cm"),show_row_names = FALSE, show_column_names = T,row_dend_reorder = T)
Heatmap(nCounts_de, name = "expression", clustering_distance_rows = "pearson",
col = colorRamp2(c(min(nCounts_de), median(nCounts_de), max(nCounts_de)), c("red", "black", "green")), clustering_method_rows = "ward.D",
top_annotation_height = unit(4, "mm"), cluster_rows = T,cluster_columns = F,
width=unit(6,"cm"),show_row_names = FALSE, show_column_names = T,row_dend_reorder = F)
Heatmap(nCounts_de, name = "normalized counts", clustering_distance_rows = "pearson", split=10,
col = colorRamp2(c(min(nCounts_de), median(nCounts_de), max(nCounts_de)), c("red", "black", "green")), clustering_method_rows = "ward.D",
top_annotation_height = unit(4, "mm"), cluster_rows = T,cluster_columns = F,
width=unit(6,"cm"),show_row_names = FALSE, show_column_names = T,row_dend_reorder = T)
Heatmap(nCounts_de[1:6], name = "normalized counts", clustering_distance_rows = "pearson", split=10,
col = colorRamp2(c(min(nCounts_de), median(nCounts_de), max(nCounts_de)), c("red", "black", "green")), clustering_method_rows = "ward.D",
top_annotation_height = unit(4, "mm"), cluster_rows = T,cluster_columns = F,
width=unit(6,"cm"),show_row_names = FALSE, show_column_names = T,row_dend_reorder = T)
Heatmap(nCounts_de[,1:6], name = "normalized counts", clustering_distance_rows = "pearson", split=10,
col = colorRamp2(c(min(nCounts_de), median(nCounts_de), max(nCounts_de)), c("red", "black", "green")), clustering_method_rows = "ward.D",
top_annotation_height = unit(4, "mm"), cluster_rows = T,cluster_columns = F,
width=unit(6,"cm"),show_row_names = FALSE, show_column_names = T,row_dend_reorder = T)
Heatmap(nCounts_de[,1:6], name = "normalized counts", clustering_distance_rows = "euclidian", split=10,
col = colorRamp2(c(min(nCounts_de), median(nCounts_de), max(nCounts_de)), c("red", "black", "green")), clustering_method_rows = "ward.D",
top_annotation_height = unit(4, "mm"), cluster_rows = T,cluster_columns = F,
width=unit(6,"cm"),show_row_names = FALSE, show_column_names = T,row_dend_reorder = T)
Heatmap(nCounts_de[,1:6], name = "normalized counts", clustering_distance_rows = "spearman", split=10,
col = colorRamp2(c(min(nCounts_de), median(nCounts_de), max(nCounts_de)), c("red", "black", "green")), clustering_method_rows = "ward.D",
top_annotation_height = unit(4, "mm"), cluster_rows = T,cluster_columns = F,
width=unit(6,"cm"),show_row_names = FALSE, show_column_names = T,row_dend_reorder = T)
Heatmap(nCounts_de[,1:6], name = "normalized counts", clustering_distance_rows = "spearman", split=15,
col = colorRamp2(c(min(nCounts_de), median(nCounts_de), max(nCounts_de)), c("red", "black", "green")), clustering_method_rows = "ward.D",
top_annotation_height = unit(4, "mm"), cluster_rows = T,cluster_columns = F,
width=unit(6,"cm"),show_row_names = FALSE, show_column_names = T,row_dend_reorder = T)
Heatmap(nCounts_de, name = "normalized counts", clustering_distance_rows = "spearman",
col = colorRamp2(c(min(nCounts_de), median(nCounts_de), max(nCounts_de)), c("red", "black", "green")), clustering_method_rows = "ward.D",
top_annotation_height = unit(4, "mm"), cluster_rows = T,cluster_columns = F,
width=unit(6,"cm"),show_row_names = FALSE, show_column_names = T,row_dend_reorder = T)
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R', launch.browser = T)
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R', launch.browser = T)
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest/GO app.R')
shiny::runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
knitr::opts_chunk$set(echo = TRUE)
wd <- getwd()
setwd(wd)
data(zfGenes)
filter <- apply(zfGenes, 1, function(x) length(x[x>5])>=2)
data(zfGenes)
filter <- apply(zfGenes, 1, function(x) length(x[x>5])>=2)
library(zebrafishRNASeq)
data(zfGenes)
filter <- apply(zfGenes, 1, function(x) length(x[x>5])>=2)
filtered <- zfGenes[filter,]
genes <- rownames(filtered)[grep("^ENS", rownames(filtered))]
spikes <- rownames(filtered)[grep("^ERCC", rownames(filtered))]   # spikes = negative control genes
x <- as.factor(rep(c("Ctl", "Trt"), each=3))  # levels
# convert to EDA object. RUVseq works with matrix object too
# filtered <- (ecoli);  # test with ecoli data
set <- newSeqExpressionSet(as.matrix(filtered))
set <- betweenLaneNormalization(set, which="upper")      # upper-quartile normalization
####################################
# normalized by RUVg
set1 <- RUVg(set, spikes, k=1) # spikes = negative control genes
set1
pData(set1)
design <- model.matrix(~x + W_1, data=pData(set1))   #construct design matrix
y <- DGEList(counts=counts(set1), group=x)        # counts(set1) = extract raw counts
y <- calcNormFactors(y, method="upperquartile")   # upper quartile normalization
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmFit(y, design)
lrt <- glmLRT(fit, coef=2)
res <- topTags(lrt, n=nrow(filtered))
class(res)
res@.Data
res$log2FCabs <- abs(res@.Data$logFC)
res <- as.dat.frame(topTags(lrt, n=nrow(filtered)))
res <- as.data.frame(topTags(lrt, n=nrow(filtered)))
res$log2FCabs <- abs(res$logFC)
res.de <- filter(res)
res.de <- filter(res, log2FCabs>=1, FDR<=0.05)
dim(res.de)
dds <- DESeqDataSetFromMatrix(countData = counts(set1),
colData = pData(set1),
design = ~ W_1 + x)
pData(set1)
cbind(x,pData(set1))
dds <- DESeqDataSetFromMatrix(countData = counts(set1),
colData = cbind(x,pData(set1)),
design = ~ W_1 + x)
dds <- DESeq(dds)
res.deseq2 <- results(dds)
head(res.deseq2)
res.deseq2 <- as.data.frame(results(dds))
res.deseq2$log2FCabs <- abs(res.deseq2$log2FoldChange)
res.de2 <- filter(res.deseq2, log2FCabs>=1, padj<=0.05)
dim(res.de2)
tail(res.de2)
res.deseq2 <- as.data.frame(results(dds))
res.deseq2$log2FCabs <- abs(res.deseq2$log2FoldChange)
res.deseq2$Gene <- rownames(res.deseq2)
res.de2 <- filter(res.deseq2, log2FCabs>=1, padj<=0.05)
set2 <- RUVg.apply(filtered,spikes)
pData(set2)
pData(set1)
design <- model.matrix(~x + W_1, data=pData(set2))   #construct design matrix
y <- DGEList(counts=counts(set2), group=x)        # counts(set1) = extract raw counts
y <- calcNormFactors(y, method="upperquartile")   # upper quartile normalization
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmFit(y, design)
lrt <- glmLRT(fit, coef=2)     # lrt = likelihood ratio test
res <- as.data.frame(topTags(lrt, n=nrow(filtered)))
res$log2FCabs <- abs(res$logFC)
res$Gene <- rownames(res)
res.de <- filter(res, log2FCabs>=1, FDR<=0.05)
dim(res.de)
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
pData(set2)
x
res_ui <- deseqApply(DS=counts(set2),f.df=f.df,W_1=pData(set2)$W_1,f1="Ctl",f2="Trt" )
f.df <- data.frame(x); rownames(f.df) <- rownames(pData(set2))
res_ui <- deseqApply(DS=counts(set2),f.df=f.df,W_1=pData(set2)$W_1,f1="Ctl",f2="Trt" )
class(res_ui)
de_deseq_ui <- deseqFilter(res_deseq_ui)
res_deseq_ui <- deseqApply(DS=counts(set2),f.df=f.df,W_1=pData(set2)$W_1,f1="Ctl",f2="Trt" )
de_deseq_ui <- deseqFilter(res_deseq_ui)
dim(de_deseq_ui)
head(res.deseq2)
head(as.data.frame(res_deseq_ui))
tail(res.deseq2)
tail(as.data.frame(res_deseq_ui))
res_deseq_ui <- deseqApply(DS=counts(set2),f.df=f.df,W_1=pData(set2)$W_1,f1="Ctl",f2="Trt" )
res_deseq_ui
res_deseq_df <- as.data.frame(res_deseq_ui)
res_deseq_df$log2FCabs <- abs(res_deseq_df$log2FoldChange)
res_deseq_df$Gene <- rownames(res_deseq_df)
de_deseq_ui <- filter(res_deseq_df, log2FoldChange>=1, padj<=0.05)
dim(de_deseq_ui)
dim(res.de2)
f.df <- data.frame(x); rownames(f.df) <- rownames(pData(set2))
DS=counts(set2);f.df=f.df; W_1=pData(set2)$W_1; f1="Ctl"; f2="Trt"
colnames(f.df) <- "f"
f <- f.df[,1]
# aa <- ncol(DS)
# keep <- apply(DS, 1, function(x) length(x[x>2])>=aa)  # filtering
DS_filt <- DS[keep,]
# aa <- ncol(DS)
# keep <- apply(DS, 1, function(x) length(x[x>2])>=aa)  # filtering
DS_filt <- DS #[keep,]
f.df$W_1 <- W_1
dds <- DESeq2::DESeqDataSetFromMatrix(countData = as.matrix(DS_filt),   # data frame or matrix
colData = f.df,
design = ~ W_1+f)
ddsDE <- DESeq(dds)
# print("from deseqApply");
# print("W_1"); print(W_1)
# print("dds.DE") ;print(head(ddsDE))
res.fromfunc <- results(ddsDE,contrast=c("f",f2,f1))
res.fromfunc
head(res.deseq2)
res_deseq_df <- as.data.frame(res.fromfunc)
res_deseq_df$log2FCabs <- abs(res_deseq_df$log2FoldChange)
res_deseq_df$Gene <- rownames(res_deseq_df)
de_deseq_ui <- filter(res_deseq_df, log2FoldChange>=1, padj<=0.05)
dim(de_deseq_ui)
res.fromfunc <- results(ddsDE)
res_deseq_df <- as.data.frame(res.fromfunc)
res_deseq_df$log2FCabs <- abs(res_deseq_df$log2FoldChange)
res_deseq_df$Gene <- rownames(res_deseq_df)
de_deseq_ui <- filter(res_deseq_df, log2FoldChange>=1, padj<=0.05)
dim(de_deseq_ui)
x
f
pData(set1)
W_1
dim(counts(set1))
dim(DS_dilt)
dim(DS_filt)
all(counts(set1) == DS_filt)
dds <- DESeqDataSetFromMatrix(countData = counts(set1),
colData = cbind(x,pData(set1)),
design = ~ W_1 + x)
dds <- DESeq(dds)
de_deseq_ui <- filter(res_deseq_df, log2FCabs>=1, padj<=0.05)
dim(de_deseq_ui)
dim(res.de2)
all(de_deseq_ui$Gene %in% res.de2$Gene)
deseqApply <- function(DS,f.df,W_1=NULL,f1,f2) {
# W_1 calculated by RUVg with spikes (negative control genes)
if(length(W_1) != nrow(f.df))
W_1 <- NULL
colnames(f.df) <- "f"
f <- f.df[,1]
# aa <- ncol(DS);  keep <- apply(DS, 1, function(x) length(x[x>2])>=aa)  # filtering
DS_filt <- DS #[keep,]
if(! is.null(W_1)){
f.df$W_1 <- W_1
dds <- DESeq2::DESeqDataSetFromMatrix(countData = as.matrix(DS_filt),   # data frame or matrix
colData = f.df,
design = ~ W_1+f)
} else {
dds <- DESeq2::DESeqDataSetFromMatrix(countData = as.matrix(DS_filt),   # data frame or matrix
colData = f.df,
design = ~ f)
}
ddsDE <- DESeq(dds)
# print("from deseqApply");
# print("W_1"); print(W_1)
# print("dds.DE") ;print(head(ddsDE))
res <- results(ddsDE,contrast=c("f",f2,f1))
print("from deseqApply");
print(res)
return(res)
}
f.df <- data.frame(x); rownames(f.df) <- rownames(pData(set2))
res_deseq_ui <- deseqApply(DS=counts(set2),f.df=f.df,W_1=pData(set2)$W_1,f1="Ctl",f2="Trt" )
res_deseq_filt2 <- deseqFilter(res_deseq_ui)
dim(res_deseq_filt2)
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
dim(res.de)
any(res.de$Gene == "^ERCC")
any(res.de$Gene == "ERCC-00104")
lrt <- glmLRT(fit)  #,coef=2   # lrt = likelihood ratio test
res <- as.data.frame(topTags(lrt, n=nrow(filtered)))
res$log2FCabs <- abs(res$logFC)
res$Gene <- rownames(res)
res.de <- filter(res, log2FCabs>=1, FDR<=0.05)
dim(res.de)
design <- model.matrix(~x + W_1, data=pData(set2))   #construct design matrix
y <- DGEList(counts=counts(set2), group=x)        # counts(set1) = extract raw counts
y <- calcNormFactors(y, method="upperquartile")   # upper quartile normalization
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmFit(y, design)
lrt <- glmLRT(fit)  #,coef=2   # lrt = likelihood ratio test
res <- as.data.frame(topTags(lrt, n=nrow(filtered)))
res$log2FCabs <- abs(res$logFC)
res$Gene <- rownames(res)
res.de <- filter(res, log2FCabs>=1, FDR<=0.05)
dim(res.de)
lrt
lrt <- glmLRT(fit,coef=2)  #   # lrt = likelihood ratio test
res <- as.data.frame(topTags(lrt, n=nrow(filtered)))
res$log2FCabs <- abs(res$logFC)
res$Gene <- rownames(res)
res.de <- filter(res, log2FCabs>=1, FDR<=0.05)
dim(res.de)
res2 <- edgerApply(DS=counts(set2),f=x,W_1=pData(set2)$W_1,f1="Ctl",f2="Trt")
res.de2 <- edgerFilter(res2)
dim(res2)
edgerFilter <- function(res, FC=2, p_val=0.05){
# res = result object from edger
res <- res$table
colnames(res)[colnames(res)=="logFC"] <- "log2FC"
res$log2FCabs <- abs(res$log2FC)
# padj.na <- is.na(res$FDR);  res$FDR[padj.na] <- res$PValue[padj.na] # replace NA of padj by pval
res <- res %>% rownames_to_column('Gene')
res.cutoff <- filter(res, log2FCabs >= log2(FC), FDR <= p_val)
return(res.cutoff)
}
res.de2 <- edgerFilter(res2,FC=2, p_val=0.05)
dim(res.de2)
dim(res.de)
all(res.de$Gene %in% res.de2$Gene)
design <- model.matrix(~x + W_1, data=pData(set2))   #construct design matrix
y <- DGEList(counts=counts(set2), group=x)        # counts(set1) = extract raw counts
y <- calcNormFactors(y, method="upperquartile")   # upper quartile normalization
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmFit(y, design)
lrt <- glmLRT(fit,coef=2)  #   # lrt = likelihood ratio test
res <- as.data.frame(topTags(lrt, n=nrow(filtered)))
res$log2FCabs <- abs(res$logFC)
res$Gene <- rownames(res)
res.de <- filter(res, log2FCabs>=1, FDR<=0.05)
rm(lrt, fit,y)
dim(res.de)
res2 <- edgerApply(DS=counts(set2),f=x,W_1=pData(set2)$W_1,f1="Ctl",f2="Trt")
res.de2 <- edgerFilter(res2,FC=2, p_val=0.05)
# topTags(lrt)
dim(res.de2)
design <- model.matrix(~x + W_1, data=pData(set2))   #construct design matrix
y <- DGEList(counts=counts(set2), group=x)        # counts(set1) = extract raw counts
y <- calcNormFactors(y, method="upperquartile")   # upper quartile normalization
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmFit(y, design)
lrt <- glmLRT(fit)  #,coef=2   # lrt = likelihood ratio test
res <- as.data.frame(topTags(lrt, n=nrow(filtered)))
res$log2FCabs <- abs(res$logFC)
res$Gene <- rownames(res)
res.de <- filter(res, log2FCabs>=1, FDR<=0.05)
dim(res.de)
rm(y,lrt,fit)
res2 <- edgerApply(DS=counts(set2),f=x,W_1=pData(set2)$W_1,f1="Ctl",f2="Trt")
res.de2 <- edgerFilter(res2,FC=2, p_val=0.05)
dim(res.de2)
pData(set2)$W_1
topTags(lrt)
design <- model.matrix(~x + W_1, data=pData(set2))   #construct design matrix
y <- DGEList(counts=counts(set2), group=x)        # counts(set1) = extract raw counts
y <- calcNormFactors(y, method="upperquartile")   # upper quartile normalization
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmFit(y, design)
lrt <- glmLRT(fit)  #,coef=2   # lrt = likelihood ratio test
crt <- makeContrasts(contrasts=paste("Trt","Ctl",sep="-"),levels=design)
design
design <- model.matrix(~0+x + W_1, data=pData(set2))   #construct design matrix
y <- DGEList(counts=counts(set2), group=x)        # counts(set1) = extract raw counts
y <- calcNormFactors(y, method="upperquartile")   # upper quartile normalization
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmFit(y, design)
lrt <- glmLRT(fit)  #,coef=2   # lrt = likelihood ratio test
# crt <- makeContrasts(contrasts=paste("Trt","Ctl",sep="-"),levels=design)
res <- as.data.frame(topTags(lrt, n=nrow(filtered)))
res$log2FCabs <- abs(res$logFC)
res$Gene <- rownames(res)
res.de <- filter(res, log2FCabs>=1, FDR<=0.05)
dim(res.de)res.de
dim(res.de)
design
colnames(design)[1:2] <- c("Ctl","Trt")
crt <- makeContrasts(contrasts=paste("Trt","Ctl",sep="-"),levels=design)
res <- as.data.frame(topTags(lrt, n=nrow(filtered), contrast=crt ))
lrt <- glmLRT(fit, contrast=crt)  #,coef=2   # lrt = likelihood ratio test
res <- as.data.frame(topTags(lrt, n=nrow(filtered)))
res$log2FCabs <- abs(res$logFC)
res$Gene <- rownames(res)
res.de <- filter(res, log2FCabs>=1, FDR<=0.05)
dim(res.de)
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/RUVtest')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
rm(list=ls())
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/DE.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/DE.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
scale(c(1,2,5,6,8,7))
class(scale(c(1,2,5,6,8,7)))
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/ABioTrans-master/ABioTrans/ABioTransTT.R')
library(shiny); runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
rm(list=ls())
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
enrichRdbs <<- enrichR::listEnrichrDbs()$libraryName
enrichRdbs[1:5]
enrichRdbs <- enrichR::listEnrichrDbs()$libraryName
head(enrichRdbs)
as.integer(2)
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
as.numeric(2)
arr <- 1:4
fold=2
for (i in 1:length(arr)){
if((arr[i]<=(fold)) & (arr[i]>=(1/fold))){
arr[i]=1
}
}
arr
as.numeric(1.3)
knitr::opts_chunk$set(echo = TRUE)
wd <- getwd()
setwd(wd)
library(dplyr)
ecoli <- read.csv(paste0("C:/Users/BUITT/Dropbox/Biotrans/Yu Tong","/ecoli_raw.csv"));
library(dplyr)
ecoli <- read.csv(paste0("C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/Test data","/ecoli_raw.csv"));
column_names <- colnames(ecoli)[-c(1)]
rownames(ecoli) <- ecoli$X; ecoli <- ecoli[,column_names]
ecoli_tpm <- read.csv(paste0("C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/Test data","/ecoli_tpm.csv"));
column_names <- colnames(ecoli_tpm)[-c(1)]
rownames(ecoli_tpm) <- ecoli_tpm[,1]; ecoli_tpm <- ecoli_tpm[,column_names]
ecoli_ref <- read.csv(paste0("C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/Test data","/ecoli_ref.csv"))
rownames(ecoli_ref) <- ecoli_ref[,1]
ecoli_ref <- ecoli_ref[colnames(ecoli),]
ecoli_ref[,2] <- as.factor(ecoli_ref[,2]);ecoli_ref <- ecoli_ref %>% select(-1)
DS <- ecoli_tpm
head(DS)
de_genes <- rownames(DS)[sample(20,1000)]
de_genes <- rownames(DS)[sample(1000,20)]
de_genes
DS[rownames(DS)%in%de_genes,]
t(apply(DS[,1:6],1, scale))
t(apply(DS[de_genes,1:6],1, scale))
de_genes_ex <- DS[de_genes,1:6]
head(de_genes_ex)
scale(de_genes_ex[1,])
t(scale(de_genes_ex[1,]))
t(scale(de_genes_ex[,1]))
t(scale(de_genes_ex[1,]))
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
rm(DS)
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
library(DESeq2)
library(RUVSeq)
library(zebrafishRNASeq)
library(RColorBrewer)
data(zfGenes)
head(zfGenes)
set <- newSeqExpressionSet(as.matrix(zfGenes))
set0 <- betweenLaneNormalization(set, which="upper")
set1 <- RUVg(set0, spikes1, k=1)
spikes1 <- read.csv("C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/zfGenes_spikes.csv")
spikes1 <- read.csv("C:/Users/BUITT/Dropbox/Biotrans/Yu Tong/Test data/zfGenes_spikes.csv")
spikes1 <- as.character(spikes1[,1])
set1 <- RUVg(set0, spikes1, k=1)
set1_norm_counts <- normCounts(set1)
head(set1_norm_counts)
class(set1_norm_counts)
plotRLE(set1, outline=FALSE, ylim=c(-4, 4),main="RUV")
set1_norm_counts <- normCounts(set1)
plotRLE(newSeqExpressionSet(set1_norm_counts), outline=FALSE, ylim=c(-4, 4),main="RUV norm count")
a <- data.frame("a"=1:4,"b'=5:9)
""
"
a <- data.frame("a"=1:4,"b"=5:9)
a <- data.frame("a"=1:5,"b"=5:9)
as.data.frame(a)
a <- data.frame("a"=c(1,1,3,4,5),"b"=5:9)
a[!duplicated(a[,1]),]
class(a[!duplicated(a[,1]),])
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
runApp('C:/Users/BUITT/Dropbox/Biotrans/ABioTrans/ABioTrans.R')
wd
wd <- dirname(rstudioapi::getActiveDocumentContext()$path)  #set wd as the current folder
setwd(wd)
wd
enrichRdbs <- enrichR::listEnrichrDbs()$libraryName
write.csv(enrichRdbs,paste0(wd,"/www/enrichRdbs.csv"))
write.csv(enrichRdbs,paste0(wd,"/www/enrichRdbs.csv"),row.names = F)
write.csv(enrichRdbs,paste0(wd,"/www/enrichRdbs.csv"),row.names = F,col.names = F)
aa <- read.csv("enrichRdbs.csv")
aa <- read.csv(paste0(wd,"/www/enrichRdbs.csv"))
head(aa)
aa <- as.character(read.csv(paste0(wd,"/www/enrichRdbs.csv"))[,1])
head(aa)
class(aa)
runApp('ABioTrans.R')
rm(list=ls())
#
# ## sourcing util files
source("utils.R")
runApp('ABioTrans.R')
library(shiny); runApp('ABioTrans.R')
